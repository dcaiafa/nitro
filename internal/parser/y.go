// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

//line parser.y:11
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	expr  ast.Expr
	exprs ast.Exprs
	other interface{}
}

const LEXERR = 57346
const kAND = 57347
const kDO = 57348
const kELIF = 57349
const kELSE = 57350
const kEND = 57351
const kFALSE = 57352
const kFN = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kRETURN = 57359
const kTHEN = 57360
const kTRUE = 57361
const kVAR = 57362
const kWHILE = 57363
const NUMBER = 57364
const STRING = 57365
const ID = 57366
const EQ = 57367
const NE = 57368
const LE = 57369
const GE = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFN",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kRETURN",
	"kTHEN",
	"kTRUE",
	"kVAR",
	"kWHILE",
	"NUMBER",
	"STRING",
	"ID",
	"'='",
	"EQ",
	"NE",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"'\"'",
	"'|'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"'('",
	"','",
	"'['",
	"':'",
	"'.'",
	"'{'",
	"')'",
	"']'",
	"'}'",
	"'%'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	25, 77,
	40, 77,
	-2, 69,
	-1, 31,
	25, 78,
	40, 78,
	-2, 70,
	-1, 32,
	25, 79,
	40, 79,
	-2, 71,
	-1, 151,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 51,
	-1, 152,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 52,
	-1, 153,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 53,
	-1, 154,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 54,
	-1, 155,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 55,
	-1, 156,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 56,
	-1, 163,
	39, 76,
	41, 76,
	43, 76,
	-2, 18,
}

const yyPrivate = 57344

const yyLast = 928

var yyAct = [...]int{

	71, 214, 76, 68, 187, 70, 220, 113, 78, 47,
	126, 132, 116, 50, 125, 190, 189, 88, 163, 49,
	97, 98, 65, 66, 161, 23, 57, 32, 200, 67,
	136, 32, 99, 56, 31, 140, 55, 30, 31, 165,
	111, 30, 63, 91, 62, 89, 162, 54, 20, 61,
	3, 63, 20, 62, 95, 96, 97, 98, 90, 122,
	84, 83, 118, 44, 120, 108, 109, 110, 99, 86,
	32, 173, 79, 174, 135, 130, 134, 31, 43, 112,
	30, 137, 60, 85, 138, 131, 192, 182, 133, 80,
	176, 87, 89, 143, 139, 42, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 142,
	92, 59, 118, 93, 115, 128, 93, 127, 144, 141,
	160, 32, 168, 169, 159, 48, 60, 119, 31, 46,
	248, 30, 245, 171, 172, 244, 93, 179, 241, 227,
	224, 183, 20, 177, 178, 145, 223, 210, 197, 236,
	32, 230, 206, 221, 215, 188, 5, 31, 129, 164,
	30, 40, 1, 29, 12, 229, 193, 228, 195, 213,
	212, 20, 73, 72, 170, 69, 35, 199, 235, 198,
	234, 219, 218, 202, 201, 82, 81, 77, 32, 208,
	36, 207, 117, 114, 33, 31, 34, 45, 30, 8,
	15, 217, 7, 9, 205, 204, 186, 185, 10, 20,
	11, 32, 191, 64, 13, 231, 232, 32, 31, 14,
	233, 30, 238, 4, 31, 239, 237, 30, 2, 0,
	0, 0, 20, 32, 242, 203, 0, 0, 20, 246,
	31, 209, 0, 30, 0, 0, 0, 249, 0, 0,
	250, 0, 0, 32, 20, 0, 0, 225, 106, 0,
	31, 0, 0, 30, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 20, 0, 0, 240, 0, 104,
	105, 100, 101, 102, 103, 106, 0, 95, 96, 97,
	98, 0, 0, 0, 0, 167, 107, 0, 247, 166,
	0, 99, 0, 0, 0, 0, 104, 105, 100, 101,
	102, 103, 106, 0, 95, 96, 97, 98, 0, 0,
	0, 0, 0, 107, 0, 243, 0, 0, 99, 0,
	0, 0, 0, 104, 105, 100, 101, 102, 103, 106,
	0, 95, 96, 97, 98, 27, 58, 0, 0, 0,
	107, 0, 226, 0, 26, 99, 0, 25, 24, 37,
	104, 105, 100, 101, 102, 103, 106, 222, 95, 96,
	97, 98, 0, 0, 28, 0, 38, 107, 0, 39,
	0, 0, 99, 0, 0, 0, 0, 104, 105, 100,
	101, 102, 103, 106, 216, 95, 96, 97, 98, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 104, 105, 100, 101, 102, 103,
	106, 0, 95, 96, 97, 98, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 104, 105, 100, 101, 102, 103, 106, 0, 95,
	96, 97, 98, 0, 0, 0, 0, 0, 107, 0,
	0, 211, 0, 99, 0, 0, 0, 0, 104, 105,
	100, 101, 102, 103, 106, 184, 95, 96, 97, 98,
	0, 0, 0, 0, 0, 107, 0, 0, 196, 0,
	99, 0, 0, 0, 0, 104, 105, 100, 101, 102,
	103, 106, 0, 95, 96, 97, 98, 0, 0, 0,
	0, 0, 107, 0, 181, 0, 0, 99, 0, 0,
	0, 0, 104, 105, 100, 101, 102, 103, 106, 0,
	95, 96, 97, 98, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 104,
	105, 100, 101, 102, 103, 106, 0, 95, 96, 97,
	98, 0, 0, 0, 0, 0, 107, 0, 175, 180,
	0, 99, 0, 0, 0, 0, 104, 105, 100, 101,
	102, 103, 106, 0, 95, 96, 97, 98, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 104, 105, 100, 101, 102, 103, 106,
	123, 95, 96, 97, 98, 0, 0, 0, 0, 0,
	107, 0, 124, 0, 0, 99, 0, 0, 0, 0,
	104, 105, 100, 101, 102, 103, 106, 0, 95, 96,
	97, 98, 0, 0, 0, 0, 0, 107, 0, 94,
	0, 0, 99, 0, 0, 0, 0, 104, 105, 100,
	101, 102, 103, 106, 0, 95, 96, 97, 98, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 106, 99,
	0, 0, 0, 0, 104, 105, 100, 101, 102, 103,
	0, 0, 95, 96, 97, 98, 0, 0, 0, 104,
	105, 100, 101, 102, 103, 0, 99, 95, 96, 97,
	98, 0, 0, 27, 19, 17, 18, 0, 0, 0,
	21, 99, 26, 16, 22, 25, 24, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 6, 28, 0, 38, 27, 58, 39, 0, 0,
	51, 0, 0, 0, 26, 0, 0, 25, 24, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	53, 0, 0, 0, 28, 0, 38, 0, 0, 39,
	0, 194, 104, 105, 100, 101, 102, 103, 0, 0,
	95, 96, 97, 98, 0, 0, 27, 19, 17, 18,
	0, 0, 0, 21, 99, 26, 16, 22, 25, 24,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 28, 0, 38, 0, 0,
	39, 27, 58, 75, 74, 0, 51, 0, 0, 0,
	26, 0, 0, 25, 24, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 53, 0, 27, 58,
	28, 0, 38, 51, 0, 39, 0, 26, 0, 0,
	25, 24, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 53, 0, 0, 0, 28, 0, 38,
	121, 0, 39, 27, 58, 0, 0, 0, 51, 0,
	0, 0, 26, 0, 0, 25, 24, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 53, 0,
	0, 0, 28, 0, 38, 0, 0, 39,
}
var yyPact = [...]int{

	703, -1000, -1000, -1000, 786, 57, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 38, 105, 101, 883, 87,
	10, 883, 883, -1000, -1000, -1000, -1000, -1000, 883, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 821, 48,
	45, -1000, -1000, 335, 883, 18, -1000, 96, -1000, 631,
	-1000, 883, 883, 883, 1, -1000, -1000, -1000, 43, 40,
	90, 883, 103, 848, 19, 658, 604, 577, -32, 77,
	-1000, 658, -1000, -1000, 883, 101, -36, 36, -1000, -12,
	883, -1000, -1000, 883, 101, -1000, -1000, 1, -5, 658,
	95, 883, 883, 94, 703, 883, 883, 883, 883, 883,
	883, 883, 883, 883, 883, 883, 883, 883, -1000, -1000,
	-1000, 883, 90, -21, 6, -1000, -27, -1, 658, -1000,
	253, 883, 883, 703, -1000, -1000, -1000, 821, 821, 33,
	550, 76, -1000, -1000, 48, 48, 883, 523, 496, 73,
	883, -1000, -5, 469, -1000, 148, -16, -16, -1000, -1000,
	-1000, 20, 20, 20, 20, 20, 20, 756, 673, -29,
	-30, 703, 62, -1000, -1000, 883, -1000, 735, 442, 658,
	139, -1000, -1000, -1000, -1000, 821, 883, -1000, -1000, 658,
	-14, 48, 883, 658, 703, 144, 148, -1000, 883, -1000,
	703, 138, -1000, 658, -1000, 415, -1000, -1000, 147, 388,
	883, 146, 361, 137, 131, -1000, 703, -1000, 334, 130,
	-1000, -1000, 143, 147, -1000, 883, 821, 658, 141, 146,
	-1000, 883, 48, -1000, -1000, -1000, 703, -1000, 129, -1000,
	821, -1000, 307, 126, 123, -1000, 48, -1000, 280, 121,
	-1000, -1000, -1000, 821, -1000, -1000, -1000, 48, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 228, 50, 223, 156, 219, 214, 213, 210, 208,
	207, 206, 4, 205, 204, 203, 9, 202, 200, 17,
	199, 197, 0, 13, 47, 196, 36, 33, 26, 194,
	7, 193, 12, 192, 190, 2, 187, 8, 186, 185,
	182, 181, 6, 180, 178, 176, 3, 175, 5, 173,
	172, 170, 169, 1, 167, 165, 25, 164, 163, 162,
	159, 10, 158,
}
var yyR1 = [...]int{

	0, 59, 1, 2, 2, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 57, 5,
	6, 7, 7, 8, 9, 10, 10, 11, 11, 12,
	13, 13, 14, 15, 16, 16, 18, 18, 19, 19,
	17, 21, 21, 20, 20, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 58, 56, 56, 56,
	26, 27, 28, 29, 29, 29, 25, 30, 30, 31,
	31, 32, 32, 33, 33, 34, 35, 35, 36, 36,
	36, 37, 37, 37, 37, 38, 39, 40, 40, 41,
	41, 42, 43, 43, 44, 45, 46, 46, 47, 47,
	47, 48, 48, 48, 49, 50, 51, 51, 52, 52,
	53, 54, 54, 55, 61, 61, 62, 62, 62, 62,
	60, 60,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 0, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 5,
	2, 3, 1, 7, 7, 1, 0, 2, 1, 4,
	1, 0, 2, 7, 3, 1, 3, 1, 3, 1,
	3, 3, 1, 2, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 1, 1,
	1, 3, 4, 5, 5, 6, 6, 1, 0, 3,
	1, 2, 0, 3, 1, 3, 2, 0, 3, 3,
	1, 3, 5, 1, 1, 7, 7, 1, 0, 2,
	1, 4, 1, 0, 2, 3, 2, 0, 3, 3,
	1, 1, 1, 1, 7, 7, 1, 0, 2, 1,
	4, 1, 0, 2, 1, 0, 2, 2, 1, 1,
	1, 0,
}
var yyChk = [...]int{

	-1000, -59, -1, -2, -3, -4, 38, -17, -20, -15,
	-9, -8, -57, -6, -5, -18, 20, 12, 13, 11,
	-24, 17, 21, -56, 23, 22, 19, 10, 39, -58,
	-26, -27, -28, -29, -25, -45, -34, 24, 41, 44,
	-4, 38, 38, 40, 25, -21, 24, -16, 24, -22,
	-23, 15, 34, 35, -24, -26, -27, -28, 11, 24,
	39, 39, 43, 41, -7, -22, -22, -22, -46, -47,
	-48, -22, -49, -50, 13, 12, -35, -36, -37, 24,
	41, -38, -39, 13, 12, 38, -56, -24, -19, -22,
	40, 25, 14, 40, 18, 34, 35, 36, 37, 48,
	28, 29, 30, 31, 26, 27, 5, 16, -23, -23,
	-23, 39, 39, -30, -31, 24, -32, -33, -22, 24,
	-22, 42, 40, 6, 45, 46, -61, 40, 38, -62,
	-22, -16, 47, -61, 40, 38, 42, -22, -22, -16,
	40, 24, -19, -22, 24, -2, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -32,
	-30, 45, 40, 45, -60, 40, 46, 42, -22, -22,
	-2, -48, -48, 38, 40, 18, 14, -37, -37, -22,
	46, 18, 14, -22, 6, -10, -11, -12, 7, 45,
	45, -2, 24, -22, 46, -22, 46, 9, -46, -22,
	42, -35, -22, -2, -13, -14, 8, -12, -22, -2,
	9, 46, -51, -52, -53, 7, 6, -22, -40, -41,
	-42, 7, 6, 9, 9, -2, 18, 9, -54, -55,
	8, -53, -22, -46, -43, -44, 8, -42, -22, -35,
	-2, 9, -46, 18, 9, 9, -35, 18, 9, -46,
	-35,
}
var yyDef = [...]int{

	5, -2, 1, 2, 3, 4, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 63, 64, 65, 66, 0, 68,
	-2, -2, -2, 72, 73, 74, 75, 80, 117, 97,
	0, 7, 8, 0, 0, 43, 42, 0, 35, 0,
	45, 0, 0, 0, 62, 69, 70, 71, 0, 0,
	88, 92, 0, 0, 20, 22, 0, 0, 0, 135,
	120, 121, 122, 123, 0, 0, 0, 135, 100, 0,
	0, 103, 104, 0, 0, 6, 36, 0, 40, 39,
	0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	61, 92, 88, 0, 87, 90, 0, 141, 94, 81,
	0, 0, 0, 5, 67, 115, 116, 139, 138, 134,
	0, 0, 95, 96, 139, 138, 0, 0, 0, 0,
	0, 41, 44, 0, 34, 26, 46, 47, 48, 49,
	50, -2, -2, -2, -2, -2, -2, 57, 58, 0,
	0, 5, 0, -2, 91, 140, 82, 0, 0, 21,
	0, 118, 119, 136, 137, 117, 0, 98, 99, 101,
	0, 97, 0, 38, 5, 31, 25, 28, 0, 76,
	5, 0, 89, 93, 83, 0, 84, 19, 127, 0,
	0, 108, 0, 0, 0, 30, 5, 27, 0, 0,
	86, 85, 132, 126, 129, 0, 117, 102, 113, 107,
	110, 0, 97, 33, 24, 32, 5, 23, 0, 131,
	117, 128, 0, 0, 0, 112, 97, 109, 0, 0,
	29, 124, 133, 117, 125, 105, 114, 97, 106, 130,
	111,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 32, 3, 3, 48, 3, 3,
	39, 45, 36, 34, 40, 35, 43, 37, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 42, 38,
	28, 25, 30, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 41, 3, 46, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 33, 47,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 26, 27, 29, 31,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:116
		{
			yylex.(*lex).Module = yyDollar[1].ast.(*ast.Module)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:119
		{
			m := &ast.Module{}
			m.Stmts = yyDollar[1].asts
			m.SetPos(yyDollar[1].asts.Pos())
			yyVAL.ast = m
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:128
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:130
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:132
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:145
		{
			yyVAL.ast = &ast.FuncCallStmt{Target: yyDollar[1].expr, Args: yyDollar[3].exprs}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:153
		{
			yyVAL.ast = &ast.WhileStmt{Predicate: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:159
		{
			yyVAL.ast = &ast.ReturnStmt{Values: yyDollar[2].ast.(ast.Exprs)}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:165
		{
			l := yyDollar[1].ast.(ast.Exprs)
			yyVAL.ast = append(l, yyDollar[3].expr)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:170
		{
			yyVAL.ast = ast.Exprs{yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:178
		{
			fn := &ast.FuncStmt{}
			fn.Name = yyDollar[2].tok.Str
			fn.Params = yyDollar[4].asts
			fn.Stmts = yyDollar[6].asts
			fn.SetPos(yyDollar[1].tok.Pos)
			yyVAL.ast = fn
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:192
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:207
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:212
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:217
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:223
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:230
		{
			yyVAL.ast = nil
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:236
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:244
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:250
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.ForVar{VarName: yyDollar[3].tok})
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:254
		{
			yyVAL.asts = ast.ASTs{&ast.ForVar{VarName: yyDollar[1].tok}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:260
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.LValue{Expr: yyDollar[3].expr})
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:264
		{
			lvalue := &ast.LValue{Expr: yyDollar[1].expr}
			lvalue.SetPos(yyDollar[1].expr.Pos())
			yyVAL.asts = ast.ASTs{lvalue}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:271
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:275
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:280
		{
			yyVAL.ast = &ast.AssignStmt{Lvalues: yyDollar[1].asts, Rvalues: yyDollar[3].exprs}
			yyVAL.ast.SetPos(yyDollar[1].asts.Pos())
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:286
		{
			yyVAL.other = append(yyDollar[1].other.([]token.Token), yyDollar[3].tok)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:290
		{
			yyVAL.other = []token.Token{yyDollar[1].tok}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:295
		{
			yyVAL.ast = &ast.VarDeclStmt{Vars: yyDollar[2].other.([]token.Token), InitValues: nil}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:300
		{
			yyVAL.ast = &ast.VarDeclStmt{Vars: yyDollar[2].other.([]token.Token), InitValues: yyDollar[4].exprs}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:307
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:312
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:317
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMult}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:322
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpDiv}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:327
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMod}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:332
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:337
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:342
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:347
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:352
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpEq}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:357
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpNE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:362
		{
			yyVAL.expr = &ast.AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:367
		{
			yyVAL.expr = &ast.OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:373
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpNot}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:378
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:383
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:395
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:400
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:405
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:410
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:423
		{
			yyVAL.expr = &ast.FuncCallExpr{Target: yyDollar[1].expr, Args: yyDollar[3].exprs, RetN: 1}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:433
		{
			yyVAL.expr = &ast.SimpleRef{ID: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:439
		{
			yyVAL.expr = &ast.MemberAccess{Target: yyDollar[1].expr, Member: yyDollar[3].tok}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:445
		{
			yyVAL.expr = &ast.IndexExpr{Target: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:451
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:456
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, End: yyDollar[4].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:461
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:469
		{
			l := &ast.LambdaExpr{}
			l.Params = yyDollar[3].asts
			l.Stmts = yyDollar[5].asts
			l.SetPos(yyDollar[1].tok.Pos)
			yyVAL.expr = l
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:479
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:484
		{
			param := &ast.FuncParam{Name: yyDollar[3].tok.Str}
			param.SetPos(yyDollar[3].tok.Pos)
			yyVAL.asts = append(yyDollar[1].asts, param)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.asts = ast.ASTs{&ast.FuncParam{Name: yyDollar[1].tok.Str}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:497
		{
			yyVAL.exprs = ast.Exprs{}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:502
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:506
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.expr = &ast.ObjectLiteral{Fields: yyDollar[2].asts}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:518
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:523
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:527
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:531
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:536
		{
			yyVAL.ast = &ast.ObjectField{NameID: yyDollar[1].tok.Str, Val: yyDollar[3].expr}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:540
		{
			yyVAL.ast = &ast.ObjectField{NameExpr: yyDollar[2].expr, Val: yyDollar[5].expr}
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:551
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:567
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:574
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:579
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:583
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:589
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:596
		{
			yyVAL.ast = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:602
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:608
		{
			yyVAL.expr = &ast.ArrayLiteral{Elements: yyDollar[2].asts}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:614
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:619
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:623
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:627
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:632
		{
			yyVAL.ast = &ast.ArrayElement{Val: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 124:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:644
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 125:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:660
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:667
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:672
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:676
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:682
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:689
		{
			yyVAL.ast = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:695
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
