// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import ()

//line parser.y:9
type yySymType struct {
	yys  int
	num  float64
	str  string
	ast  interface{}
	expr interface{}
}

const LEXERR = 57346
const kVAR = 57347
const kAND = 57348
const kDO = 57349
const kELIF = 57350
const kELSE = 57351
const kEND = 57352
const kFALSE = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kTHEN = 57359
const kTRUE = 57360
const NUMBER = 57361
const STRING = 57362
const ID = 57363
const OR = 57364
const AND = 57365
const LE = 57366
const GE = 57367
const EQ = 57368
const NE = 57369

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kVAR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kTHEN",
	"kTRUE",
	"NUMBER",
	"STRING",
	"ID",
	"OR",
	"AND",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"EQ",
	"NE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"','",
	"'='",
	"'.'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"':'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	36, 50,
	-2, 23,
	-1, 91,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 32,
	-1, 92,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 33,
	-1, 93,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 34,
	-1, 94,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 35,
	-1, 95,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 36,
	-1, 96,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 37,
}

const yyPrivate = 57344

const yyLast = 572

var yyAct = [...]int{

	29, 15, 127, 15, 33, 10, 45, 10, 32, 9,
	123, 9, 107, 74, 79, 111, 42, 31, 17, 16,
	48, 72, 36, 70, 39, 43, 50, 38, 26, 30,
	52, 2, 31, 17, 16, 19, 3, 14, 75, 21,
	20, 22, 100, 47, 30, 40, 54, 55, 56, 57,
	19, 64, 14, 77, 15, 20, 24, 35, 10, 23,
	68, 65, 9, 44, 149, 71, 51, 81, 146, 58,
	59, 60, 61, 62, 63, 54, 55, 56, 57, 67,
	69, 56, 57, 129, 73, 86, 76, 15, 102, 141,
	82, 10, 136, 116, 84, 9, 85, 128, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	15, 113, 99, 124, 10, 110, 101, 27, 9, 117,
	15, 108, 140, 21, 10, 126, 112, 139, 9, 142,
	125, 15, 15, 137, 133, 10, 10, 49, 80, 9,
	9, 119, 46, 135, 66, 15, 15, 122, 150, 10,
	10, 134, 118, 9, 9, 120, 21, 121, 153, 147,
	130, 41, 144, 145, 37, 18, 28, 25, 138, 11,
	64, 152, 143, 34, 115, 106, 13, 12, 114, 105,
	65, 21, 21, 8, 17, 16, 7, 6, 58, 59,
	60, 61, 62, 63, 54, 55, 56, 57, 5, 4,
	11, 19, 1, 14, 11, 132, 20, 13, 12, 0,
	11, 13, 12, 108, 0, 17, 16, 13, 12, 17,
	16, 0, 0, 0, 0, 17, 16, 0, 0, 0,
	64, 0, 19, 0, 14, 0, 19, 20, 14, 0,
	65, 20, 19, 0, 14, 0, 0, 20, 58, 59,
	60, 61, 62, 63, 54, 55, 56, 57, 0, 26,
	0, 0, 78, 31, 17, 16, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 30, 0, 0, 0, 65,
	0, 19, 0, 14, 0, 0, 20, 58, 59, 60,
	61, 62, 63, 54, 55, 56, 57, 75, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 58, 59, 60, 61,
	62, 63, 54, 55, 56, 57, 83, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 151, 0,
	0, 0, 0, 0, 0, 58, 59, 60, 61, 62,
	63, 54, 55, 56, 57, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 148, 0, 0, 0,
	0, 0, 0, 58, 59, 60, 61, 62, 63, 54,
	55, 56, 57, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 131, 0, 0, 0, 0, 0,
	0, 58, 59, 60, 61, 62, 63, 54, 55, 56,
	57, 64, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 58,
	59, 60, 61, 62, 63, 54, 55, 56, 57, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	104, 0, 0, 0, 0, 0, 0, 58, 59, 60,
	61, 62, 63, 54, 55, 56, 57, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 103, 0,
	0, 0, 0, 0, 0, 58, 59, 60, 61, 62,
	63, 54, 55, 56, 57, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 53, 0, 0, 0,
	0, 0, 0, 58, 59, 60, 61, 62, 63, 54,
	55, 56, 57, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 64, 0, 0, 0, 0, 0,
	0, 58, 59, 60, 61, 62, 63, 54, 55, 56,
	57, 0, 58, 59, 60, 61, 62, 63, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 54, 55,
	56, 57,
}
var yyPact = [...]int{

	199, -1000, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6, 38, 244, 36, 3, -11, -1000, -1000, -1000, 244,
	13, -1000, 244, -5, 489, -1000, -2, -1000, -1000, -11,
	60, -1000, -1000, -1000, 46, -1000, -17, 3, -1000, -20,
	244, 4, 244, 32, 224, -29, 13, 292, -1000, -1000,
	244, 517, 244, 199, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, -1000, -1000, 244, 21,
	-1000, -1000, 244, 45, -1000, -1000, 461, -1000, -1000, -1000,
	-1000, -1000, 292, -1000, 433, 517, 205, 49, 49, -1000,
	-1000, 16, 16, 16, 16, 16, 16, 538, 528, 405,
	-1000, 263, -26, 3, 13, 84, 113, -1000, 244, 199,
	-1000, 244, 105, 89, 73, -1000, 244, -1000, 377, 195,
	263, 83, 105, -1000, 244, 80, 89, -1000, 244, -1000,
	164, 199, -1000, -1000, 58, -1000, 3, -1000, 349, 54,
	-1000, 13, -1000, 321, 199, 199, -1000, -1000, 3, -1000,
	-1000, 13, -1000, -1000,
}
var yyPgo = [...]int{

	0, 202, 31, 36, 13, 199, 198, 187, 186, 183,
	43, 179, 178, 175, 12, 174, 173, 8, 4, 167,
	0, 117, 166, 165, 22, 164, 27, 161, 157, 151,
	147, 10, 143, 6, 142, 138, 20, 137, 130, 127,
	125, 2, 122,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 4, 4, 3, 3, 3, 3,
	3, 8, 11, 11, 13, 13, 14, 12, 12, 15,
	9, 16, 16, 5, 6, 7, 7, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	18, 18, 19, 19, 21, 21, 22, 22, 20, 20,
	20, 20, 20, 17, 24, 24, 25, 25, 26, 26,
	26, 27, 28, 28, 30, 30, 31, 29, 29, 32,
	23, 33, 33, 33, 34, 34, 36, 36, 37, 35,
	35, 38, 38, 40, 40, 41, 39, 39, 42,
}
var yyR2 = [...]int{

	0, 1, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 7, 1, 0, 2, 1, 4, 1, 0, 3,
	7, 3, 1, 1, 3, 2, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 3, 1, 0, 2, 1, 4, 6,
	2, 7, 1, 0, 2, 1, 4, 1, 0, 2,
	3, 2, 1, 0, 2, 1, 2, 1, 7, 1,
	0, 1, 0, 2, 1, 4, 1, 0, 2,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -5, -6, -7, -8, -9, -17,
	-18, 5, 13, 12, 39, -20, 21, 20, -23, 37,
	42, -3, 35, 21, -10, -19, 15, -21, -22, -20,
	31, 19, -17, -18, -16, 21, -24, -25, -26, 21,
	42, -27, 13, 36, -10, -33, -34, -10, -36, -37,
	13, -10, 35, 17, 30, 31, 32, 33, 24, 25,
	26, 27, 28, 29, 6, 16, -21, 19, 14, 34,
	40, -26, 41, -10, -4, 34, -10, 21, 38, 43,
	-35, -36, -10, 34, -10, -10, -2, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	21, -10, 43, 17, 17, -11, -13, -14, 8, 7,
	-4, 41, -24, -33, -12, -15, 9, -14, -10, -2,
	-10, -28, -30, -31, 8, -38, -40, -41, 8, 10,
	-10, 17, 10, -4, -29, -32, 9, -31, -10, -39,
	-42, 9, -41, -10, -2, -2, 10, -24, 17, 10,
	-33, 17, -24, -33,
}
var yyDef = [...]int{

	0, -2, 1, 3, 6, 7, 8, 9, 10, -2,
	51, 0, 0, 0, 55, 0, 41, 48, 49, 0,
	73, 2, 0, 25, 0, 27, 0, 43, 44, 45,
	0, 47, 50, 51, 0, 22, 0, 54, 57, 0,
	0, 5, 0, 0, 0, 0, 80, 72, 75, 77,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 46, 0, 0,
	53, 56, 0, 0, 60, 4, 0, 40, 52, 70,
	71, 74, 79, 76, 0, 26, 13, 28, 29, 30,
	31, -2, -2, -2, -2, -2, -2, 38, 39, 0,
	21, 5, 0, 55, 73, 18, 12, 15, 0, 0,
	58, 0, 63, 82, 0, 17, 0, 14, 0, 0,
	5, 68, 62, 65, 0, 87, 81, 84, 0, 11,
	0, 0, 20, 59, 0, 67, 55, 64, 0, 0,
	86, 73, 83, 0, 19, 16, 61, 69, 55, 78,
	88, 73, 66, 85,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	37, 38, 32, 30, 34, 31, 36, 33, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 41, 3,
	24, 35, 26, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 42, 3, 43, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 39, 3, 40,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 25, 27, 28, 29,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:47
		{
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:49
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:50
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:55
		{
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:56
		{
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:57
		{
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:58
		{
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:59
		{
		}
	case 11:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:66
		{
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:68
		{
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:69
		{
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:71
		{
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:72
		{
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:76
		{
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:78
		{
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:79
		{
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:83
		{
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:88
		{
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:90
		{
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:91
		{
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:93
		{
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:95
		{
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:97
		{
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:98
		{
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:100
		{
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:101
		{
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:103
		{
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:104
		{
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:105
		{
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:106
		{
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:107
		{
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:108
		{
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:109
		{
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:112
		{
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:114
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:117
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:120
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:123
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:126
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:130
		{
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:134
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:136
		{
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:137
		{
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:139
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:140
		{
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:142
		{
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:143
		{
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:144
		{
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:151
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:153
		{
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:154
		{
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:156
		{
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:157
		{
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:161
		{
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:163
		{
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:164
		{
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:168
		{
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:170
		{
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:172
		{
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:173
		{
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:174
		{
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:176
		{
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:177
		{
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:179
		{
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:180
		{
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:187
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:189
		{
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:190
		{
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:192
		{
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:193
		{
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:200
		{
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:202
		{
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:203
		{
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:207
		{
		}
	}
	goto yystack /* stack new state and value */
}
