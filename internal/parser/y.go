// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import ()

//line parser.y:9
type yySymType struct {
	yys  int
	num  float64
	str  string
	ast  interface{}
	expr interface{}
}

const LEXERR = 57346
const kVAR = 57347
const kAND = 57348
const kDO = 57349
const kELIF = 57350
const kELSE = 57351
const kEND = 57352
const kFALSE = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kTHEN = 57359
const kTRUE = 57360
const NUMBER = 57361
const STRING = 57362
const ID = 57363
const OR = 57364
const AND = 57365
const LE = 57366
const GE = 57367
const EQ = 57368
const NE = 57369

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kVAR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kTHEN",
	"kTRUE",
	"NUMBER",
	"STRING",
	"ID",
	"OR",
	"AND",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"EQ",
	"NE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"','",
	"'='",
	"'['",
	"']'",
	"'.'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 75,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 33,
	-1, 76,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 34,
	-1, 77,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 35,
	-1, 78,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 36,
	-1, 79,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 37,
	-1, 80,
	24, 0,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	-2, 38,
}

const yyPrivate = 57344

const yyLast = 580

var yyAct = [...]int{

	8, 62, 56, 146, 127, 141, 64, 94, 2, 58,
	131, 103, 99, 111, 93, 48, 37, 38, 39, 40,
	41, 42, 33, 34, 35, 36, 84, 55, 59, 116,
	117, 102, 101, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 52, 85, 53, 54,
	83, 68, 113, 87, 69, 91, 96, 95, 31, 65,
	35, 36, 98, 33, 34, 35, 36, 104, 108, 105,
	88, 100, 23, 47, 61, 66, 15, 45, 166, 22,
	20, 19, 21, 163, 106, 107, 149, 148, 159, 154,
	136, 16, 17, 147, 12, 109, 59, 59, 27, 142,
	128, 26, 97, 28, 121, 114, 115, 153, 119, 120,
	49, 50, 51, 4, 129, 140, 152, 29, 139, 59,
	60, 130, 57, 158, 145, 132, 157, 144, 67, 138,
	63, 137, 143, 133, 112, 90, 89, 25, 24, 18,
	46, 135, 126, 156, 134, 150, 155, 125, 161, 160,
	10, 9, 7, 6, 3, 59, 1, 164, 0, 0,
	162, 167, 0, 0, 0, 11, 59, 0, 169, 0,
	170, 23, 13, 14, 0, 15, 0, 0, 22, 20,
	19, 21, 0, 0, 0, 0, 0, 0, 0, 0,
	16, 17, 0, 0, 5, 0, 0, 27, 11, 0,
	26, 0, 28, 0, 23, 13, 14, 0, 15, 0,
	0, 22, 20, 19, 21, 0, 0, 0, 43, 0,
	0, 0, 0, 16, 17, 0, 0, 30, 44, 0,
	27, 0, 0, 26, 0, 28, 37, 38, 39, 40,
	41, 42, 33, 34, 35, 36, 0, 23, 0, 0,
	0, 15, 0, 92, 22, 20, 19, 21, 0, 0,
	0, 43, 0, 0, 0, 0, 16, 17, 0, 0,
	0, 44, 0, 27, 0, 0, 26, 0, 28, 37,
	38, 39, 40, 41, 42, 33, 34, 35, 36, 43,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 37, 38, 39,
	40, 41, 42, 33, 34, 35, 36, 43, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 37, 38, 39, 40, 41,
	42, 33, 34, 35, 36, 43, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 44, 168, 0, 0, 0,
	0, 0, 0, 37, 38, 39, 40, 41, 42, 33,
	34, 35, 36, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 165, 0, 0, 0, 0, 0,
	0, 37, 38, 39, 40, 41, 42, 33, 34, 35,
	36, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 151, 0, 0, 0, 0, 0, 0, 37,
	38, 39, 40, 41, 42, 33, 34, 35, 36, 43,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 37, 38, 39,
	40, 41, 42, 33, 34, 35, 36, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 123, 0,
	0, 0, 0, 0, 0, 37, 38, 39, 40, 41,
	42, 33, 34, 35, 36, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 118, 0, 0, 0,
	0, 0, 0, 37, 38, 39, 40, 41, 42, 33,
	34, 35, 36, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 86, 0, 0, 0, 0, 0,
	0, 37, 38, 39, 40, 41, 42, 33, 34, 35,
	36, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 43, 0, 0, 0, 0, 0, 0, 37,
	38, 39, 40, 41, 42, 33, 34, 35, 36, 0,
	37, 38, 39, 40, 41, 42, 33, 34, 35, 36,
}
var yyPact = [...]int{

	160, -1000, -1000, 193, 24, -1000, -1000, -1000, 311, -1000,
	-1000, 56, -1000, 52, 236, 236, 236, 236, 9, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 236, 61, 38, 20,
	-1000, -1000, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 14, 12, -1000, 507, -1000,
	-1000, -1000, 236, 49, 236, 212, -24, 22, -1000, 535,
	-1000, 236, -31, -3, -1000, -33, 236, -1000, 236, -1000,
	535, 28, 28, -1000, -1000, 33, 33, 33, 33, 33,
	33, -8, 546, 236, 236, 47, 160, 283, -1000, -28,
	17, 535, -1000, -1000, -1000, 61, 61, -5, 479, -1000,
	-1000, 38, 38, 236, 255, 451, 535, 423, -1000, 92,
	-1000, -1000, -1000, 236, -1000, -1000, -1000, -1000, 61, -1000,
	-1000, 535, -34, 38, 160, 81, 92, -1000, 236, 535,
	91, 236, 85, 77, 76, -1000, 160, -1000, 395, 80,
	91, -1000, 236, 535, 79, 85, -1000, 236, -1000, -1000,
	-1000, 160, 73, -1000, 61, -1000, 367, 68, -1000, 38,
	-1000, 339, -1000, -1000, -1000, 61, -1000, -1000, 38, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 156, 8, 154, 113, 153, 152, 0, 151, 150,
	147, 144, 142, 4, 141, 140, 94, 139, 138, 137,
	136, 135, 134, 1, 130, 7, 6, 128, 127, 126,
	124, 3, 123, 2, 122, 9, 120, 118, 116, 115,
	5, 107, 102,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 9, 10, 10, 12, 12, 13, 11,
	11, 14, 8, 15, 15, 5, 6, 6, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 16, 16, 16, 16, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 20, 20, 21, 21,
	19, 23, 23, 24, 24, 24, 26, 26, 26, 27,
	28, 28, 30, 30, 31, 29, 29, 32, 18, 33,
	33, 34, 34, 34, 35, 35, 36, 37, 37, 39,
	39, 40, 38, 38, 41, 25, 25, 42, 42, 42,
	42, 22, 22,
}
var yyR2 = [...]int{

	0, 1, 1, 0, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 7, 1, 0, 2, 1, 4, 1,
	0, 2, 7, 3, 1, 3, 2, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 4, 3, 2, 0, 3, 1,
	3, 2, 0, 3, 3, 1, 3, 5, 1, 7,
	1, 0, 2, 1, 4, 1, 0, 2, 3, 2,
	0, 3, 3, 1, 1, 1, 7, 1, 0, 2,
	1, 4, 1, 0, 2, 0, 1, 2, 2, 1,
	1, 1, 0,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, 34, -5, -6, -7, -8,
	-9, 5, -16, 12, 13, 15, 30, 31, -17, 20,
	19, 21, 18, 11, -18, -19, 40, 37, 42, -4,
	34, 34, 36, 30, 31, 32, 33, 24, 25, 26,
	27, 28, 29, 6, 16, 21, -15, 21, -7, -16,
	-16, -16, 37, 39, 40, -7, -33, -34, -35, -7,
	-36, 13, -23, -24, -26, 21, 37, -27, 13, 34,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -7, 36, 14, 35, 17, -7, 21, -20,
	-21, -7, 41, 38, -25, 35, 34, -42, -7, 43,
	-25, 35, 34, 44, -7, -7, -7, -7, 21, -2,
	38, 41, -22, 35, -35, -35, 34, 35, 17, -26,
	-26, -7, 38, 17, 7, -10, -12, -13, 8, -7,
	-33, 44, -23, -2, -11, -14, 9, -13, -7, -37,
	-39, -40, 8, -7, -28, -30, -31, 8, 10, 10,
	-2, 17, -38, -41, 9, -40, -7, -29, -32, 9,
	-31, -7, -2, 10, -33, 17, 10, -23, 17, -33,
	-23,
}
var yyDef = [...]int{

	3, -2, 1, 2, 0, 7, 8, 9, 10, 11,
	12, 0, 28, 0, 0, 0, 0, 0, 44, 45,
	46, 47, 48, 49, 50, 51, 0, 80, 62, 0,
	5, 6, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 24, 0, 41,
	42, 43, 0, 0, 57, 0, 0, 95, 83, 84,
	85, 0, 0, 95, 65, 0, 0, 68, 0, 4,
	25, 29, 30, 31, 32, -2, -2, -2, -2, -2,
	-2, 39, 40, 0, 0, 0, 3, 0, 53, 0,
	102, 59, 55, 78, 79, 100, 99, 96, 0, 60,
	61, 100, 99, 0, 0, 0, 27, 0, 23, 15,
	52, 54, 56, 101, 81, 82, 97, 98, 80, 63,
	64, 66, 0, 62, 3, 20, 14, 17, 0, 58,
	88, 0, 71, 0, 0, 19, 3, 16, 0, 93,
	87, 90, 0, 67, 76, 70, 73, 0, 22, 13,
	21, 3, 0, 92, 80, 89, 0, 0, 75, 62,
	72, 0, 18, 86, 94, 80, 69, 77, 62, 91,
	74,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	40, 41, 32, 30, 35, 31, 39, 33, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 44, 34,
	24, 36, 26, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 37, 3, 38, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 42, 3, 43,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 25, 27, 28, 29,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:47
		{
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:49
		{
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:50
		{
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:52
		{
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:53
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:54
		{
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:55
		{
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:57
		{
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:58
		{
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:59
		{
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:60
		{
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:61
		{
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:68
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:70
		{
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:71
		{
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:73
		{
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:74
		{
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:78
		{
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:80
		{
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:81
		{
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:85
		{
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:90
		{
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:92
		{
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:93
		{
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:95
		{
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:97
		{
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:98
		{
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:100
		{
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:101
		{
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:103
		{
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:104
		{
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:105
		{
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:106
		{
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:107
		{
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:108
		{
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:109
		{
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:112
		{
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:114
		{
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:115
		{
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:116
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:117
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:119
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:120
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:122
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:123
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:125
		{
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:126
		{
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:127
		{
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:128
		{
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:129
		{
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:131
		{
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:132
		{
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:134
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:135
		{
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:137
		{
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:139
		{
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:140
		{
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:142
		{
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:143
		{
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:144
		{
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:146
		{
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:147
		{
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:148
		{
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:155
		{
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:157
		{
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:158
		{
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:160
		{
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:161
		{
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:165
		{
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:167
		{
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:168
		{
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:172
		{
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:174
		{
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:176
		{
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:177
		{
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:180
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:181
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:183
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:184
		{
		}
	case 86:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:191
		{
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:193
		{
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:194
		{
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:201
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:203
		{
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:204
		{
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:208
		{
		}
	}
	goto yystack /* stack new state and value */
}
