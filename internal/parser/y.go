// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

//line parser.y:11
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	expr  ast.Expr
	exprs ast.Exprs
	other interface{}
}

const LEXERR = 57346
const kAND = 57347
const kDO = 57348
const kELIF = 57349
const kELSE = 57350
const kEND = 57351
const kFALSE = 57352
const kFN = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kMETA = 57357
const kNOT = 57358
const kOR = 57359
const kRETURN = 57360
const kTHEN = 57361
const kTRUE = 57362
const kVAR = 57363
const kWHILE = 57364
const NUMBER = 57365
const STRING = 57366
const ID = 57367
const EQ = 57368
const NE = 57369
const LE = 57370
const GE = 57371

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFN",
	"kFOR",
	"kIF",
	"kIN",
	"kMETA",
	"kNOT",
	"kOR",
	"kRETURN",
	"kTHEN",
	"kTRUE",
	"kVAR",
	"kWHILE",
	"NUMBER",
	"STRING",
	"ID",
	"'='",
	"EQ",
	"NE",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"'\"'",
	"'|'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"'('",
	"','",
	"'['",
	"':'",
	"'.'",
	"'{'",
	"')'",
	"']'",
	"'}'",
	"'%'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 33,
	26, 98,
	41, 98,
	-2, 89,
	-1, 34,
	26, 99,
	41, 99,
	-2, 90,
	-1, 35,
	26, 100,
	41, 100,
	-2, 91,
	-1, 69,
	40, 97,
	42, 97,
	44, 97,
	45, 97,
	-2, 38,
	-1, 190,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 71,
	-1, 191,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 72,
	-1, 192,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 73,
	-1, 193,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 74,
	-1, 194,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 75,
	-1, 195,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	32, 0,
	-2, 76,
	-1, 202,
	40, 96,
	42, 96,
	44, 96,
	45, 96,
	-2, 37,
}

const yyPrivate = 57344

const yyLast = 958

var yyAct = [...]int{

	79, 84, 76, 258, 229, 265, 78, 143, 86, 54,
	173, 222, 26, 146, 156, 57, 162, 117, 6, 126,
	127, 155, 56, 39, 177, 73, 74, 124, 125, 126,
	127, 128, 75, 178, 176, 64, 232, 175, 174, 35,
	231, 128, 202, 35, 200, 63, 62, 69, 113, 34,
	33, 242, 118, 34, 33, 44, 166, 220, 61, 113,
	215, 121, 23, 115, 179, 224, 23, 223, 212, 148,
	213, 165, 150, 164, 137, 138, 139, 140, 142, 71,
	112, 70, 42, 160, 122, 141, 35, 122, 122, 167,
	68, 67, 71, 161, 70, 42, 34, 33, 169, 109,
	163, 158, 120, 157, 51, 204, 168, 201, 152, 116,
	170, 114, 111, 49, 234, 145, 183, 119, 180, 50,
	55, 118, 182, 149, 66, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 181, 67,
	141, 148, 184, 46, 53, 108, 5, 290, 289, 288,
	199, 285, 207, 208, 198, 271, 268, 45, 267, 35,
	254, 46, 239, 281, 210, 211, 274, 218, 250, 34,
	33, 135, 209, 216, 217, 110, 8, 266, 259, 230,
	225, 159, 23, 136, 47, 203, 1, 87, 172, 35,
	171, 43, 4, 133, 134, 129, 130, 131, 132, 34,
	33, 124, 125, 126, 127, 235, 3, 237, 32, 206,
	15, 273, 23, 205, 272, 128, 241, 240, 257, 233,
	256, 243, 81, 244, 80, 77, 38, 280, 279, 264,
	263, 252, 90, 251, 245, 246, 35, 89, 85, 147,
	144, 36, 37, 261, 52, 247, 34, 33, 11, 18,
	10, 253, 12, 249, 248, 228, 227, 13, 14, 23,
	276, 275, 35, 277, 278, 72, 16, 283, 35, 269,
	282, 17, 34, 33, 7, 2, 0, 286, 34, 33,
	0, 0, 0, 291, 0, 23, 35, 0, 135, 284,
	293, 23, 0, 0, 294, 0, 34, 33, 0, 0,
	136, 0, 292, 0, 0, 0, 35, 0, 0, 23,
	133, 134, 129, 130, 131, 132, 34, 33, 124, 125,
	126, 127, 135, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 128, 0, 136, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 133, 134, 129, 130, 131, 132,
	135, 0, 124, 125, 126, 127, 0, 0, 0, 0,
	0, 0, 136, 0, 270, 0, 128, 0, 0, 0,
	0, 0, 133, 134, 129, 130, 131, 132, 135, 262,
	124, 125, 126, 127, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	133, 134, 129, 130, 131, 132, 135, 260, 124, 125,
	126, 127, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 133, 134,
	129, 130, 131, 132, 135, 0, 124, 125, 126, 127,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 133, 134, 129, 130,
	131, 132, 135, 0, 124, 125, 126, 127, 0, 0,
	0, 0, 0, 0, 136, 0, 255, 0, 128, 0,
	0, 0, 0, 0, 133, 134, 129, 130, 131, 132,
	135, 226, 124, 125, 126, 127, 0, 0, 0, 0,
	0, 0, 136, 0, 238, 0, 128, 0, 0, 0,
	0, 0, 133, 134, 129, 130, 131, 132, 135, 0,
	124, 125, 126, 127, 0, 0, 0, 0, 0, 0,
	136, 0, 221, 0, 128, 0, 0, 0, 0, 0,
	133, 134, 129, 130, 131, 132, 135, 0, 124, 125,
	126, 127, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 133, 134,
	129, 130, 131, 132, 0, 135, 124, 125, 126, 127,
	0, 0, 0, 0, 0, 0, 0, 136, 219, 214,
	128, 135, 0, 0, 0, 0, 0, 133, 134, 129,
	130, 131, 132, 136, 0, 124, 125, 126, 127, 0,
	0, 0, 0, 133, 134, 129, 130, 131, 132, 128,
	0, 124, 125, 126, 127, 135, 153, 0, 0, 30,
	65, 0, 154, 0, 0, 128, 0, 136, 0, 29,
	0, 0, 28, 27, 40, 0, 0, 133, 134, 129,
	130, 131, 132, 135, 0, 124, 125, 126, 127, 31,
	0, 41, 0, 0, 42, 136, 0, 123, 0, 128,
	0, 0, 0, 0, 0, 133, 134, 129, 130, 131,
	132, 135, 0, 124, 125, 126, 127, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 135, 128, 0, 0,
	0, 0, 0, 133, 134, 129, 130, 131, 132, 0,
	0, 124, 125, 126, 127, 0, 0, 0, 133, 134,
	129, 130, 131, 132, 0, 128, 124, 125, 126, 127,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 107,
	128, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 0, 0, 91, 30, 22, 20,
	21, 0, 0, 0, 0, 24, 0, 29, 19, 25,
	28, 27, 40, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 65, 9, 31, 0, 41,
	58, 0, 42, 0, 29, 0, 0, 28, 27, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 0, 31, 0, 41, 0, 0, 42,
	0, 236, 133, 134, 129, 130, 131, 132, 0, 0,
	124, 125, 126, 127, 0, 30, 22, 20, 21, 0,
	0, 0, 0, 24, 128, 29, 19, 25, 28, 27,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 31, 0, 41, 0, 0,
	42, 30, 65, 83, 82, 0, 0, 58, 0, 0,
	0, 29, 0, 0, 28, 27, 40, 0, 0, 0,
	0, 0, 0, 0, 30, 65, 59, 60, 0, 0,
	58, 31, 0, 41, 29, 0, 42, 28, 27, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 30, 65, 31, 0, 41, 151, 58, 42,
	0, 0, 29, 0, 0, 28, 27, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 0, 31, 0, 41, 0, 0, 42,
}
var yyPact = [...]int{

	131, -1000, -1000, 747, -1000, 118, -1000, 825, 74, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78, 119,
	95, 912, 99, 50, 912, 912, -1000, -1000, -1000, -1000,
	-1000, 912, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 861, 731, 136, 73, -1000, 3, 72, -1000, -1000,
	619, 912, 76, -1000, 47, -1000, 648, -1000, 912, 912,
	912, 37, -1000, -1000, -1000, 51, 38, 90, 912, -1000,
	98, 884, 67, 676, 620, 586, -26, 62, -1000, 676,
	-1000, -1000, 912, 95, -32, 32, -1000, 13, 912, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 95, 912, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71,
	-1000, -1000, -1000, 14, -1000, -1000, 37, 23, 676, 93,
	912, 912, 91, 747, 912, 912, 912, 912, 912, 912,
	912, 912, 912, 912, 912, 912, 912, -1000, -1000, -1000,
	912, -1000, 90, -2, 66, -1000, -4, 64, 676, -1000,
	166, 912, 912, 747, -1000, -1000, -1000, 861, 861, 29,
	570, 46, -1000, -1000, 731, 731, 912, 541, 43, 513,
	-1000, -37, 26, -1000, -1000, -1000, -1000, -1000, -1000, 912,
	-1000, 23, 485, -1000, 172, -18, -18, -1000, -1000, -1000,
	-8, -8, -8, -8, -8, -8, 795, 691, -6, -10,
	747, 89, -1000, -1000, 912, -1000, 774, 457, 676, 153,
	-1000, -1000, -1000, -1000, 861, 912, -1000, -1000, 676, 8,
	912, 731, -1000, 14, 14, 676, 747, 160, 172, -1000,
	912, -1000, 747, 151, -1000, 676, -1000, 429, -1000, -1000,
	171, 401, 912, 373, 170, -1000, -1000, 149, 147, -1000,
	747, -1000, 345, 146, -1000, -1000, 158, 171, -1000, 912,
	861, 676, 731, 155, 170, -1000, 912, -1000, -1000, -1000,
	747, -1000, 142, -1000, 861, -1000, 317, 140, 139, 138,
	-1000, 731, -1000, 283, -1000, -1000, -1000, 861, -1000, -1000,
	-1000, -1000, 731, -1000, -1000,
}
var yyPgo = [...]int{

	0, 275, 18, 274, 176, 271, 266, 265, 258, 257,
	256, 255, 4, 254, 253, 252, 9, 250, 249, 17,
	248, 244, 0, 15, 58, 242, 46, 45, 35, 241,
	7, 240, 13, 239, 23, 1, 238, 8, 237, 232,
	230, 229, 5, 228, 227, 226, 2, 225, 6, 224,
	222, 220, 218, 3, 214, 211, 12, 210, 208, 206,
	192, 191, 55, 33, 190, 188, 10, 187, 186, 185,
	14, 181,
}
var yyR1 = [...]int{

	0, 68, 1, 59, 59, 60, 61, 61, 61, 61,
	62, 63, 64, 64, 65, 65, 65, 66, 66, 66,
	66, 66, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 57, 57, 5,
	6, 7, 7, 8, 9, 10, 10, 11, 11, 12,
	13, 13, 14, 15, 16, 16, 18, 18, 19, 19,
	17, 21, 21, 20, 20, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 58, 58, 56, 56,
	56, 26, 27, 28, 29, 29, 29, 25, 30, 30,
	31, 31, 32, 32, 33, 33, 34, 35, 35, 36,
	36, 36, 37, 37, 37, 37, 38, 39, 40, 40,
	41, 41, 42, 43, 43, 44, 45, 46, 46, 47,
	47, 47, 48, 48, 48, 49, 50, 51, 51, 52,
	52, 53, 54, 54, 55, 70, 70, 71, 71, 71,
	71, 69, 69, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
}
var yyR2 = [...]int{

	0, 1, 2, 1, 0, 3, 3, 2, 2, 1,
	2, 3, 1, 0, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 2, 5,
	2, 3, 1, 7, 7, 1, 0, 2, 1, 4,
	1, 0, 2, 7, 3, 1, 3, 1, 3, 1,
	3, 3, 1, 2, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 2, 1, 1,
	1, 1, 3, 4, 5, 5, 6, 6, 1, 0,
	3, 1, 2, 0, 3, 1, 3, 2, 0, 3,
	3, 1, 3, 5, 1, 1, 7, 7, 1, 0,
	2, 1, 4, 1, 0, 2, 3, 2, 0, 3,
	3, 1, 1, 1, 1, 7, 7, 1, 0, 2,
	1, 4, 1, 0, 2, 1, 0, 2, 2, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -68, -1, -59, -60, 15, -2, -3, -4, 39,
	-17, -20, -15, -9, -8, -57, -6, -5, -18, 21,
	12, 13, 11, -24, 18, 22, -56, 24, 23, 20,
	10, 40, -58, -26, -27, -28, -29, -25, -45, -34,
	25, 42, 45, -61, -62, 39, 25, -4, 39, 39,
	41, 26, -21, 25, -16, 25, -22, -23, 16, 35,
	36, -24, -26, -27, -28, 11, 25, 40, 40, -34,
	44, 42, -7, -22, -22, -22, -46, -47, -48, -22,
	-49, -50, 13, 12, -35, -36, -37, -67, 42, -38,
	-39, 25, 5, 6, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 8, 9, -62,
	39, 39, -63, 45, 39, -56, -24, -19, -22, 41,
	26, 14, 41, 19, 35, 36, 37, 38, 49, 29,
	30, 31, 32, 27, 28, 5, 17, -23, -23, -23,
	40, -34, 40, -30, -31, 25, -32, -33, -22, 25,
	-22, 43, 41, 6, 46, 47, -70, 41, 39, -71,
	-22, -16, 48, -70, 41, 39, 43, -22, -16, -22,
	39, -64, -65, -66, 24, 23, 20, 10, -63, 41,
	25, -19, -22, 25, -2, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -32, -30,
	46, 41, 46, -69, 41, 47, 43, -22, -22, -2,
	-48, -48, 39, 41, 19, 14, -37, -37, -22, 47,
	14, 19, 48, 41, 39, -22, 6, -10, -11, -12,
	7, 46, 46, -2, 25, -22, 47, -22, 47, 9,
	-46, -22, 43, -22, -35, -66, -66, -2, -13, -14,
	8, -12, -22, -2, 9, 47, -51, -52, -53, 7,
	6, -22, 6, -40, -41, -42, 7, 9, 9, -2,
	19, 9, -54, -55, 8, -53, -22, -46, -35, -43,
	-44, 8, -42, -22, -2, 9, -46, 19, 9, 9,
	9, -35, 19, -46, -35,
}
var yyDef = [...]int{

	4, -2, 1, 24, 3, 0, 2, 22, 23, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 83, 84, 85,
	86, 0, 88, -2, -2, -2, 92, 93, 94, 95,
	101, 138, 118, 0, 0, 9, 0, 0, 26, 27,
	0, 0, 63, 62, 0, 55, 0, 65, 0, 0,
	0, 82, 89, 90, 91, 0, 0, 109, 113, -2,
	0, 0, 40, 42, 0, 0, 0, 156, 141, 142,
	143, 144, 0, 0, 0, 156, 121, 0, 0, 124,
	125, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 5, 0,
	7, 8, 10, 13, 25, 56, 0, 60, 59, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 80, 81,
	113, 97, 109, 0, 108, 111, 0, 162, 115, 102,
	0, 0, 0, 24, 87, 136, 137, 160, 159, 155,
	0, 0, 116, 117, 160, 159, 0, 0, 0, 0,
	6, 0, 12, 16, 17, 18, 19, 20, 21, 0,
	61, 64, 0, 54, 46, 66, 67, 68, 69, 70,
	-2, -2, -2, -2, -2, -2, 77, 78, 0, 0,
	24, 0, -2, 112, 161, 103, 0, 0, 41, 0,
	139, 140, 157, 158, 138, 0, 119, 120, 122, 0,
	0, 118, 11, 0, 0, 58, 24, 51, 45, 48,
	0, 96, 24, 0, 110, 114, 104, 0, 105, 39,
	148, 0, 0, 0, 129, 14, 15, 0, 0, 50,
	24, 47, 0, 0, 107, 106, 153, 147, 150, 0,
	138, 123, 118, 134, 128, 131, 0, 53, 44, 52,
	24, 43, 0, 152, 138, 149, 0, 0, 0, 0,
	133, 118, 130, 0, 49, 145, 154, 138, 146, 127,
	126, 135, 118, 151, 132,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 33, 3, 3, 49, 3, 3,
	40, 46, 37, 35, 41, 36, 44, 38, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 43, 39,
	29, 26, 31, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 42, 3, 47, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 45, 34, 48,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 27, 28, 30, 32,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yylex.(*lex).Module = yyDollar[1].ast.(*ast.Module)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:131
		{
			m := &ast.Module{}
			m.Stmts = yyDollar[2].asts
			m.SetPos(yyDollar[1].ast.Pos())
			yyVAL.ast = m
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:139
		{
			yyVAL.ast = ast.ASTs{}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			yyVAL.ast = yyDollar[2].asts
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:143
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:144
		{
			yyVAL.asts = yyDollar[1].asts
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:145
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:146
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:148
		{
			yyVAL.ast = nil
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:150
		{
			yyVAL.ast = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:152
		{
			yyVAL.asts = nil
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:153
		{
			yyVAL.asts = nil
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:155
		{
			yyVAL.asts = nil
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:156
		{
			yyVAL.asts = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:157
		{
			yyVAL.asts = nil
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:159
		{
			yyVAL.ast = nil
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:160
		{
			yyVAL.ast = nil
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:161
		{
			yyVAL.ast = nil
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:162
		{
			yyVAL.ast = nil
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:163
		{
			yyVAL.ast = nil
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:166
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:167
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:169
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:170
		{
			yyVAL.asts = yyDollar[1].asts
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:171
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:172
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:184
		{
			yyVAL.ast = &ast.FuncCallStmt{Target: yyDollar[1].expr, Args: yyDollar[3].exprs}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:189
		{
			yyVAL.ast = &ast.FuncCallStmt{Target: yyDollar[1].expr, Args: ast.Exprs{yyDollar[2].expr}}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:197
		{
			yyVAL.ast = &ast.WhileStmt{Predicate: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:203
		{
			yyVAL.ast = &ast.ReturnStmt{Values: yyDollar[2].ast.(ast.Exprs)}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:209
		{
			l := yyDollar[1].ast.(ast.Exprs)
			yyVAL.ast = append(l, yyDollar[3].expr)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:214
		{
			yyVAL.ast = ast.Exprs{yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:222
		{
			fn := &ast.FuncStmt{}
			fn.Name = yyDollar[2].tok.Str
			fn.Params = yyDollar[4].asts
			fn.Stmts = yyDollar[6].asts
			fn.SetPos(yyDollar[1].tok.Pos)
			yyVAL.ast = fn
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:236
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:251
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:256
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:261
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:267
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:274
		{
			yyVAL.ast = nil
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:280
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:288
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:294
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.ForVar{VarName: yyDollar[3].tok})
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:298
		{
			yyVAL.asts = ast.ASTs{&ast.ForVar{VarName: yyDollar[1].tok}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:304
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.LValue{Expr: yyDollar[3].expr})
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:308
		{
			lvalue := &ast.LValue{Expr: yyDollar[1].expr}
			lvalue.SetPos(yyDollar[1].expr.Pos())
			yyVAL.asts = ast.ASTs{lvalue}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:315
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:319
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:324
		{
			yyVAL.ast = &ast.AssignStmt{Lvalues: yyDollar[1].asts, Rvalues: yyDollar[3].exprs}
			yyVAL.ast.SetPos(yyDollar[1].asts.Pos())
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:330
		{
			yyVAL.other = append(yyDollar[1].other.([]token.Token), yyDollar[3].tok)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:334
		{
			yyVAL.other = []token.Token{yyDollar[1].tok}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:339
		{
			yyVAL.ast = &ast.VarDeclStmt{Vars: yyDollar[2].other.([]token.Token), InitValues: nil}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:344
		{
			yyVAL.ast = &ast.VarDeclStmt{Vars: yyDollar[2].other.([]token.Token), InitValues: yyDollar[4].exprs}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:351
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:356
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:361
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMult}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:366
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpDiv}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:371
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMod}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:376
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:381
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:386
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:391
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:396
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpEq}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:401
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpNE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:406
		{
			yyVAL.expr = &ast.AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:411
		{
			yyVAL.expr = &ast.OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:417
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpNot}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:422
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:427
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:434
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:439
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:444
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:454
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:467
		{
			yyVAL.expr = &ast.FuncCallExpr{Target: yyDollar[1].expr, Args: yyDollar[3].exprs, RetN: 1}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:472
		{
			yyVAL.expr = &ast.FuncCallExpr{Target: yyDollar[1].expr, Args: ast.Exprs{yyDollar[2].expr}, RetN: 1}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:482
		{
			yyVAL.expr = &ast.SimpleRef{ID: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:488
		{
			yyVAL.expr = &ast.MemberAccess{Target: yyDollar[1].expr, Member: yyDollar[3].tok}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:494
		{
			yyVAL.expr = &ast.IndexExpr{Target: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:500
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:505
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, End: yyDollar[4].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:510
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:518
		{
			l := &ast.LambdaExpr{}
			l.Params = yyDollar[3].asts
			l.Stmts = yyDollar[5].asts
			l.SetPos(yyDollar[1].tok.Pos)
			yyVAL.expr = l
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:528
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:533
		{
			param := &ast.FuncParam{Name: yyDollar[3].tok.Str}
			param.SetPos(yyDollar[3].tok.Pos)
			yyVAL.asts = append(yyDollar[1].asts, param)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:539
		{
			yyVAL.asts = ast.ASTs{&ast.FuncParam{Name: yyDollar[1].tok.Str}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:546
		{
			yyVAL.exprs = ast.Exprs{}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:551
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:555
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:560
		{
			yyVAL.expr = &ast.ObjectLiteral{Fields: yyDollar[2].asts}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:567
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:572
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:576
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:585
		{
			yyVAL.ast = &ast.ObjectField{NameID: yyDollar[1].tok.Str, Val: yyDollar[3].expr}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:589
		{
			yyVAL.ast = &ast.ObjectField{NameExpr: yyDollar[2].expr, Val: yyDollar[5].expr}
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:600
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:616
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:623
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:628
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:632
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:638
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:645
		{
			yyVAL.ast = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:657
		{
			yyVAL.expr = &ast.ArrayLiteral{Elements: yyDollar[2].asts}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:663
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:672
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:676
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:681
		{
			yyVAL.ast = &ast.ArrayElement{Val: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:693
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 146:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:709
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:716
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:725
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:731
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:738
		{
			yyVAL.ast = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
