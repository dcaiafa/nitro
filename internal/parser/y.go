// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

//line parser.y:11
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	expr  ast.Expr
	exprs ast.Exprs
	other interface{}
}

const LEXERR = 57346
const kAND = 57347
const kDO = 57348
const kELIF = 57349
const kELSE = 57350
const kEND = 57351
const kFALSE = 57352
const kFN = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kRETURN = 57359
const kTHEN = 57360
const kTRUE = 57361
const kVAR = 57362
const kWHILE = 57363
const NUMBER = 57364
const STRING = 57365
const ID = 57366
const EQ = 57367
const NE = 57368
const LE = 57369
const GE = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFN",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kRETURN",
	"kTHEN",
	"kTRUE",
	"kVAR",
	"kWHILE",
	"NUMBER",
	"STRING",
	"ID",
	"'='",
	"EQ",
	"NE",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"'\"'",
	"'|'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"'('",
	"','",
	"'['",
	"':'",
	"'.'",
	"'{'",
	"')'",
	"']'",
	"'}'",
	"'%'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 96,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 44,
	-1, 97,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 45,
	-1, 98,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 46,
	-1, 99,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 47,
	-1, 100,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 48,
	-1, 101,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 842

var yyAct = [...]int{

	14, 3, 80, 72, 198, 192, 166, 82, 109, 56,
	74, 122, 42, 43, 44, 45, 44, 45, 58, 128,
	63, 64, 121, 178, 168, 132, 46, 145, 46, 141,
	147, 153, 71, 154, 69, 53, 70, 75, 68, 131,
	142, 130, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 51, 52, 47, 48,
	49, 50, 112, 108, 42, 43, 44, 45, 61, 162,
	117, 118, 51, 52, 47, 48, 49, 50, 46, 126,
	42, 43, 44, 45, 156, 133, 105, 89, 134, 127,
	88, 87, 60, 129, 46, 106, 40, 124, 135, 123,
	104, 170, 83, 21, 111, 136, 137, 61, 138, 139,
	106, 57, 106, 143, 114, 144, 55, 140, 226, 84,
	150, 223, 222, 219, 75, 75, 65, 66, 67, 205,
	202, 201, 188, 159, 151, 152, 171, 214, 157, 158,
	208, 184, 199, 169, 193, 167, 5, 125, 172, 146,
	174, 38, 1, 207, 206, 191, 75, 177, 190, 176,
	77, 76, 73, 180, 179, 181, 34, 213, 186, 212,
	187, 197, 185, 196, 86, 85, 81, 35, 116, 195,
	115, 110, 32, 33, 25, 8, 203, 7, 9, 183,
	182, 165, 164, 10, 210, 75, 11, 209, 211, 62,
	216, 12, 215, 217, 13, 4, 218, 2, 53, 75,
	0, 0, 220, 0, 0, 0, 0, 224, 0, 54,
	0, 0, 75, 0, 0, 227, 0, 0, 228, 51,
	52, 47, 48, 49, 50, 53, 0, 42, 43, 44,
	45, 0, 0, 0, 0, 149, 54, 0, 225, 148,
	0, 46, 0, 0, 0, 0, 51, 52, 47, 48,
	49, 50, 53, 0, 42, 43, 44, 45, 0, 0,
	0, 0, 0, 54, 0, 221, 0, 0, 46, 0,
	0, 0, 0, 51, 52, 47, 48, 49, 50, 0,
	0, 42, 43, 44, 45, 0, 0, 30, 18, 16,
	17, 0, 22, 0, 19, 46, 29, 15, 20, 27,
	26, 28, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 23, 24, 0, 0, 6, 31, 54, 36, 204,
	0, 37, 53, 200, 0, 0, 0, 51, 52, 47,
	48, 49, 50, 54, 0, 42, 43, 44, 45, 0,
	0, 0, 0, 51, 52, 47, 48, 49, 50, 46,
	0, 42, 43, 44, 45, 53, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 54, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 51, 52, 47, 48,
	49, 50, 54, 0, 42, 43, 44, 45, 0, 0,
	0, 0, 51, 52, 47, 48, 49, 50, 46, 53,
	42, 43, 44, 45, 0, 0, 0, 0, 0, 0,
	54, 0, 189, 0, 46, 0, 0, 0, 0, 0,
	51, 52, 47, 48, 49, 50, 53, 163, 42, 43,
	44, 45, 0, 0, 0, 0, 0, 54, 0, 0,
	175, 0, 46, 0, 0, 0, 0, 51, 52, 47,
	48, 49, 50, 53, 0, 42, 43, 44, 45, 0,
	0, 0, 0, 0, 54, 0, 161, 0, 0, 46,
	0, 0, 0, 0, 51, 52, 47, 48, 49, 50,
	53, 0, 42, 43, 44, 45, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 51, 52, 47, 48, 49, 50, 53, 0, 42,
	43, 44, 45, 0, 0, 0, 0, 0, 54, 0,
	155, 160, 0, 46, 0, 0, 0, 0, 51, 52,
	47, 48, 49, 50, 53, 0, 42, 43, 44, 45,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 51, 52, 47, 48, 49,
	50, 53, 113, 42, 43, 44, 45, 0, 0, 0,
	0, 0, 54, 0, 120, 0, 0, 46, 0, 0,
	0, 0, 51, 52, 47, 48, 49, 50, 53, 0,
	42, 43, 44, 45, 0, 0, 0, 0, 0, 54,
	0, 107, 0, 0, 46, 0, 0, 0, 0, 51,
	52, 47, 48, 49, 50, 53, 0, 42, 43, 44,
	45, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	0, 46, 0, 0, 0, 41, 51, 52, 47, 48,
	49, 50, 0, 0, 42, 43, 44, 45, 0, 0,
	30, 18, 16, 17, 0, 22, 0, 19, 46, 29,
	15, 20, 27, 26, 28, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 54, 0, 39, 31,
	0, 36, 0, 0, 37, 0, 51, 52, 47, 48,
	49, 50, 0, 0, 42, 43, 44, 45, 30, 59,
	0, 0, 0, 22, 0, 0, 0, 29, 46, 0,
	27, 26, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 24, 0, 0, 0, 31, 0, 36,
	0, 0, 37, 0, 173, 30, 59, 79, 78, 0,
	22, 0, 0, 0, 29, 0, 0, 27, 26, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	24, 0, 30, 59, 31, 0, 36, 22, 0, 37,
	0, 29, 0, 0, 27, 26, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 24, 0, 0,
	0, 31, 0, 36, 119, 0, 37, 30, 59, 0,
	0, 0, 22, 0, 0, 0, 29, 0, 0, 27,
	26, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 24, 0, 0, 0, 31, 0, 36, 0,
	0, 37,
}
var yyPact = [...]int{

	287, -1000, -1000, -1000, 650, 58, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 620, 92, 87, 797, 68, 797,
	797, -1000, 797, 797, 797, -5, -1000, -1000, -1000, -1000,
	-1000, 797, -1000, -1000, -1000, -1000, 735, 78, 49, -1000,
	-1000, 797, 797, 797, 797, 797, 797, 797, 797, 797,
	797, 797, 797, 797, 797, 75, 72, -1000, 593, 29,
	24, 80, 22, 670, 566, -1000, -1000, -1000, 90, 797,
	762, 539, -24, 59, -1000, 670, -1000, -1000, 797, 87,
	-28, 1, -1000, -17, 797, -1000, -1000, 797, 87, -1000,
	670, -20, -20, -1000, -1000, -1000, -22, -22, -22, -22,
	-22, -22, 46, 30, 797, 797, 84, 287, 80, -16,
	0, -1000, 797, 287, -1000, -18, -10, 670, 203, 797,
	-1000, -1000, -1000, 735, 735, -7, 512, 70, -1000, -1000,
	78, 78, 797, 485, 458, 55, 670, 431, -1000, 138,
	-21, 287, 77, 670, 127, -1000, -1000, 797, -1000, 698,
	404, -1000, -1000, -1000, -1000, 735, 797, -1000, -1000, 670,
	-19, 78, 797, 287, 133, 138, -1000, 797, 287, 123,
	-1000, -1000, 670, -1000, 376, -1000, 137, 360, 797, 135,
	327, 122, 121, -1000, 287, -1000, 311, 120, -1000, -1000,
	132, 137, -1000, 797, 735, 670, 129, 135, -1000, 797,
	78, -1000, -1000, -1000, 287, -1000, 114, -1000, 735, -1000,
	257, 113, 112, -1000, 78, -1000, 230, 109, -1000, -1000,
	-1000, 735, -1000, -1000, -1000, 78, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 207, 1, 205, 146, 204, 201, 199, 196, 193,
	192, 191, 6, 190, 189, 188, 9, 187, 185, 0,
	103, 184, 183, 182, 8, 181, 180, 178, 177, 2,
	176, 7, 175, 174, 173, 171, 4, 169, 167, 166,
	3, 162, 10, 161, 160, 158, 155, 5, 154, 153,
	152, 149, 11, 147,
}
var yyR1 = [...]int{

	0, 50, 1, 2, 2, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 5, 6,
	7, 7, 8, 9, 10, 10, 11, 11, 12, 13,
	13, 14, 15, 16, 16, 17, 18, 18, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 23, 23,
	23, 23, 22, 24, 24, 25, 25, 26, 26, 27,
	27, 28, 29, 29, 30, 30, 30, 31, 31, 31,
	31, 32, 33, 34, 34, 35, 35, 36, 37, 37,
	38, 39, 40, 40, 41, 41, 41, 42, 42, 42,
	43, 44, 45, 45, 46, 46, 47, 48, 48, 49,
	52, 52, 53, 53, 53, 53, 51, 51,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 0, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 2,
	3, 1, 7, 7, 1, 0, 2, 1, 4, 1,
	0, 2, 7, 3, 1, 3, 2, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 1, 1, 1, 1, 4, 5,
	5, 6, 6, 1, 0, 3, 1, 2, 0, 3,
	1, 3, 2, 0, 3, 3, 1, 3, 5, 1,
	1, 7, 7, 1, 0, 2, 1, 4, 1, 0,
	2, 3, 2, 0, 3, 3, 1, 1, 1, 1,
	7, 7, 1, 0, 2, 1, 4, 1, 0, 2,
	1, 0, 2, 2, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -50, -1, -2, -3, -4, 38, -17, -18, -15,
	-9, -8, -6, -5, -19, 20, 12, 13, 11, 17,
	21, -20, 15, 34, 35, -21, 23, 22, 24, 19,
	10, 39, -23, -22, -39, -28, 41, 44, -4, 38,
	38, 25, 34, 35, 36, 37, 48, 28, 29, 30,
	31, 26, 27, 5, 16, 24, -16, 24, -19, 11,
	24, 39, -7, -19, -19, -20, -20, -20, 43, 39,
	41, -19, -40, -41, -42, -19, -43, -44, 13, 12,
	-29, -30, -31, 24, 41, -32, -33, 13, 12, 38,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, 25, 14, 40, 18, 39, -24,
	-25, 24, 40, 6, 24, -26, -27, -19, -19, 42,
	45, 46, -52, 40, 38, -53, -19, -16, 47, -52,
	40, 38, 42, -19, -19, -16, -19, -19, 24, -2,
	-24, 45, 40, -19, -2, 45, -51, 40, 46, 42,
	-19, -42, -42, 38, 40, 18, 14, -31, -31, -19,
	46, 18, 14, 6, -10, -11, -12, 7, 45, -2,
	24, 9, -19, 46, -19, 46, -40, -19, 42, -29,
	-19, -2, -13, -14, 8, -12, -19, -2, 9, 46,
	-45, -46, -47, 7, 6, -19, -34, -35, -36, 7,
	6, 9, 9, -2, 18, 9, -48, -49, 8, -47,
	-19, -40, -37, -38, 8, -36, -19, -29, -2, 9,
	-40, 18, 9, 9, -29, 18, 9, -40, -29,
}
var yyDef = [...]int{

	5, -2, 1, 2, 3, 4, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 55, 56, 57, 58, 59,
	60, 0, 64, 65, 66, 67, 103, 83, 0, 7,
	8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 34, 0, 0,
	0, 74, 19, 21, 0, 52, 53, 54, 0, 78,
	0, 0, 0, 121, 106, 107, 108, 109, 0, 0,
	0, 121, 86, 0, 0, 89, 90, 0, 0, 6,
	35, 39, 40, 41, 42, 43, -2, -2, -2, -2,
	-2, -2, 50, 51, 0, 0, 0, 5, 74, 0,
	73, 76, 0, 5, 61, 0, 127, 80, 0, 0,
	63, 101, 102, 125, 124, 120, 0, 0, 81, 82,
	125, 124, 0, 0, 0, 0, 37, 0, 33, 25,
	0, 5, 0, 20, 0, 62, 77, 126, 68, 0,
	0, 104, 105, 122, 123, 103, 0, 84, 85, 87,
	0, 83, 0, 5, 30, 24, 27, 0, 5, 0,
	75, 18, 79, 69, 0, 70, 113, 0, 0, 94,
	0, 0, 0, 29, 5, 26, 0, 0, 72, 71,
	118, 112, 115, 0, 103, 88, 99, 93, 96, 0,
	83, 32, 23, 31, 5, 22, 0, 117, 103, 114,
	0, 0, 0, 98, 83, 95, 0, 0, 28, 110,
	119, 103, 111, 91, 100, 83, 92, 116, 97,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 32, 3, 3, 48, 3, 3,
	39, 45, 36, 34, 40, 35, 43, 37, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 42, 38,
	28, 25, 30, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 41, 3, 46, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 33, 47,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 26, 27, 29, 31,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:107
		{
			yylex.(*lex).Module = yyDollar[1].ast.(*ast.Module)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:110
		{
			m := &ast.Module{}
			m.Stmts = yyDollar[1].asts
			m.SetPos(yyDollar[1].asts.Pos())
			yyVAL.ast = m
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:119
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:121
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:123
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:134
		{
			yyVAL.ast = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:142
		{
			yyVAL.ast = &ast.WhileStmt{Predicate: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:148
		{
			yyVAL.ast = &ast.ReturnStmt{Values: yyDollar[2].ast.(ast.Exprs)}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:154
		{
			l := yyDollar[1].ast.(ast.Exprs)
			yyVAL.ast = append(l, yyDollar[3].expr)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:159
		{
			yyVAL.ast = ast.Exprs{yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:167
		{
			fn := &ast.FuncStmt{}
			fn.Name = yyDollar[2].tok.Str
			fn.Params = yyDollar[4].asts
			fn.Stmts = yyDollar[6].asts
			fn.SetPos(yyDollar[1].tok.Pos)
			yyVAL.ast = fn
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:181
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:196
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:201
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:206
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:212
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:219
		{
			yyVAL.ast = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:225
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:233
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:239
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.ForVar{VarName: yyDollar[3].tok})
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:243
		{
			yyVAL.asts = ast.ASTs{&ast.ForVar{VarName: yyDollar[1].tok}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:249
		{
			lvalue := &ast.LValue{Expr: yyDollar[1].expr}
			lvalue.SetPos(yyDollar[1].expr.Pos())
			yyVAL.ast = &ast.AssignStmt{Lvalue: lvalue, Rvalue: yyDollar[3].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:257
		{
			yyVAL.ast = &ast.VarDeclStmt{VarName: yyDollar[2].tok, InitValue: nil}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:262
		{
			yyVAL.ast = &ast.VarDeclStmt{VarName: yyDollar[2].tok, InitValue: yyDollar[4].expr}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:269
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:274
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:279
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMult}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:284
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpDiv}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:289
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMod}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:294
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:299
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:304
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:309
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:314
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpEq}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:319
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpNE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:324
		{
			yyVAL.expr = &ast.AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:329
		{
			yyVAL.expr = &ast.OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpNot}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:340
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:345
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:352
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:357
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:362
		{
			yyVAL.expr = &ast.SimpleRef{ID: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:367
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:372
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:377
		{
			yyVAL.expr = &ast.MemberAccess{Target: yyDollar[1].expr, Member: yyDollar[3].tok}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:382
		{
			yyVAL.expr = &ast.FuncCall{Target: yyDollar[1].expr, Args: yyDollar[3].exprs}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:396
		{
			yyVAL.expr = &ast.IndexExpr{Target: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:401
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:406
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, End: yyDollar[4].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:411
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:419
		{
			l := &ast.LambdaExpr{}
			l.Params = yyDollar[3].asts
			l.Stmts = yyDollar[5].asts
			l.SetPos(yyDollar[1].tok.Pos)
			yyVAL.expr = l
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:429
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			param := &ast.FuncParam{Name: yyDollar[3].tok.Str}
			param.SetPos(yyDollar[3].tok.Pos)
			yyVAL.asts = append(yyDollar[1].asts, param)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:440
		{
			yyVAL.asts = ast.ASTs{&ast.FuncParam{Name: yyDollar[1].tok.Str}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:447
		{
			yyVAL.exprs = ast.Exprs{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:452
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:456
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.expr = &ast.ObjectLiteral{Fields: yyDollar[2].asts}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:473
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:477
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:486
		{
			yyVAL.ast = &ast.ObjectField{NameID: yyDollar[1].tok.Str, Val: yyDollar[3].expr}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:490
		{
			yyVAL.ast = &ast.ObjectField{NameExpr: yyDollar[2].expr, Val: yyDollar[5].expr}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:501
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:517
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:524
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:529
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:533
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:539
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:546
		{
			yyVAL.ast = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:552
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:558
		{
			yyVAL.expr = &ast.ArrayLiteral{Elements: yyDollar[2].asts}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:564
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:573
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:577
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:582
		{
			yyVAL.ast = &ast.ArrayElement{Val: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:594
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:610
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:617
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:626
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:632
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:639
		{
			yyVAL.ast = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
