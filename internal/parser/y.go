// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

//line parser.y:11
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	expr  ast.Expr
	exprs ast.Exprs
	other interface{}
}

const LEXERR = 57346
const kAND = 57347
const kDO = 57348
const kELIF = 57349
const kELSE = 57350
const kEND = 57351
const kFALSE = 57352
const kFN = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kRETURN = 57359
const kTHEN = 57360
const kTRUE = 57361
const kVAR = 57362
const kWHILE = 57363
const NUMBER = 57364
const STRING = 57365
const ID = 57366
const EQ = 57367
const NE = 57368
const LE = 57369
const GE = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFN",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kRETURN",
	"kTHEN",
	"kTRUE",
	"kVAR",
	"kWHILE",
	"NUMBER",
	"STRING",
	"ID",
	"'='",
	"EQ",
	"NE",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"'\"'",
	"'|'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"'('",
	"','",
	"'['",
	"':'",
	"'.'",
	"'{'",
	"')'",
	"']'",
	"'}'",
	"'%'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 23,
	25, 69,
	-2, 62,
	-1, 24,
	25, 70,
	-2, 63,
	-1, 25,
	25, 71,
	-2, 64,
	-1, 102,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 44,
	-1, 103,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 45,
	-1, 104,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 46,
	-1, 105,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 47,
	-1, 106,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 48,
	-1, 107,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	31, 0,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 850

var yyAct = [...]int{

	14, 205, 87, 79, 199, 81, 173, 89, 116, 60,
	129, 45, 46, 47, 48, 47, 48, 135, 128, 62,
	175, 70, 71, 152, 185, 49, 148, 49, 65, 25,
	75, 139, 77, 25, 76, 169, 78, 154, 64, 24,
	163, 82, 160, 24, 161, 112, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	138, 113, 137, 63, 23, 131, 113, 130, 23, 149,
	119, 113, 115, 3, 68, 96, 123, 44, 125, 54,
	55, 50, 51, 52, 53, 56, 133, 45, 46, 47,
	48, 111, 140, 58, 177, 141, 134, 118, 145, 136,
	61, 49, 124, 59, 233, 142, 54, 55, 50, 51,
	52, 53, 143, 144, 45, 46, 47, 48, 95, 94,
	150, 230, 229, 67, 147, 226, 212, 157, 49, 209,
	90, 82, 82, 22, 208, 195, 158, 159, 68, 178,
	166, 221, 215, 25, 191, 164, 165, 91, 206, 25,
	200, 174, 132, 24, 153, 179, 1, 181, 15, 24,
	72, 73, 74, 82, 184, 214, 183, 5, 213, 198,
	187, 186, 42, 197, 84, 193, 83, 25, 23, 192,
	80, 38, 220, 219, 23, 204, 202, 24, 146, 203,
	93, 92, 88, 39, 151, 122, 121, 117, 36, 25,
	37, 217, 82, 216, 25, 218, 222, 223, 29, 24,
	224, 8, 23, 7, 24, 9, 82, 190, 189, 227,
	25, 172, 176, 171, 231, 10, 11, 69, 12, 82,
	24, 13, 234, 4, 23, 235, 2, 56, 0, 23,
	25, 0, 0, 0, 188, 0, 0, 0, 57, 194,
	24, 0, 0, 0, 0, 23, 0, 0, 54, 55,
	50, 51, 52, 53, 0, 210, 45, 46, 47, 48,
	56, 0, 0, 0, 156, 23, 0, 0, 155, 0,
	49, 57, 0, 232, 0, 225, 0, 0, 0, 0,
	0, 54, 55, 50, 51, 52, 53, 56, 0, 45,
	46, 47, 48, 0, 0, 0, 0, 0, 57, 0,
	228, 0, 0, 49, 0, 0, 0, 0, 54, 55,
	50, 51, 52, 53, 0, 0, 45, 46, 47, 48,
	0, 0, 34, 19, 17, 18, 0, 26, 0, 20,
	49, 33, 16, 21, 32, 31, 30, 0, 0, 0,
	0, 56, 0, 0, 0, 0, 27, 28, 0, 0,
	6, 35, 57, 40, 211, 0, 41, 56, 207, 0,
	0, 0, 54, 55, 50, 51, 52, 53, 57, 0,
	45, 46, 47, 48, 0, 0, 0, 0, 54, 55,
	50, 51, 52, 53, 49, 0, 45, 46, 47, 48,
	56, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 57, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 54, 55, 50, 51, 52, 53, 57, 0, 45,
	46, 47, 48, 0, 0, 0, 0, 54, 55, 50,
	51, 52, 53, 49, 56, 45, 46, 47, 48, 0,
	0, 0, 0, 0, 0, 57, 0, 196, 0, 49,
	0, 0, 0, 0, 0, 54, 55, 50, 51, 52,
	53, 56, 170, 45, 46, 47, 48, 0, 0, 0,
	0, 0, 57, 0, 0, 182, 0, 49, 0, 0,
	0, 0, 54, 55, 50, 51, 52, 53, 56, 0,
	45, 46, 47, 48, 0, 0, 0, 0, 0, 57,
	0, 168, 0, 0, 49, 0, 0, 0, 0, 54,
	55, 50, 51, 52, 53, 56, 0, 45, 46, 47,
	48, 0, 0, 0, 0, 0, 57, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 54, 55, 50, 51,
	52, 53, 56, 0, 45, 46, 47, 48, 0, 0,
	0, 0, 0, 57, 0, 162, 167, 0, 49, 0,
	0, 0, 0, 54, 55, 50, 51, 52, 53, 56,
	0, 45, 46, 47, 48, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	54, 55, 50, 51, 52, 53, 56, 120, 45, 46,
	47, 48, 0, 0, 0, 0, 0, 57, 0, 127,
	0, 0, 49, 0, 0, 0, 0, 54, 55, 50,
	51, 52, 53, 56, 0, 45, 46, 47, 48, 0,
	0, 0, 0, 0, 57, 0, 114, 0, 0, 49,
	0, 0, 0, 0, 54, 55, 50, 51, 52, 53,
	0, 0, 45, 46, 47, 48, 0, 0, 34, 19,
	17, 18, 0, 26, 0, 20, 49, 33, 16, 21,
	32, 31, 30, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 27, 28, 57, 0, 43, 35, 0, 40,
	0, 0, 41, 0, 54, 55, 50, 51, 52, 53,
	0, 0, 45, 46, 47, 48, 34, 66, 0, 0,
	0, 26, 0, 0, 0, 33, 49, 0, 32, 31,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 28, 0, 0, 0, 35, 0, 40, 0, 0,
	41, 0, 180, 34, 66, 86, 85, 0, 26, 0,
	0, 0, 33, 0, 0, 32, 31, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 27, 28, 0,
	34, 66, 35, 0, 40, 26, 0, 41, 0, 33,
	0, 0, 32, 31, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 28, 0, 0, 0, 35,
	0, 40, 126, 0, 41, 34, 66, 0, 0, 0,
	26, 0, 0, 0, 33, 0, 0, 32, 31, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 27,
	28, 0, 0, 0, 35, 0, 40, 0, 0, 41,
}
var yyPact = [...]int{

	322, -1000, -1000, -1000, 658, 39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 678, 68, 79, 76, 805, 99,
	805, 805, -1000, -1000, -1000, -1000, 805, 805, 805, -9,
	-1000, -1000, -1000, -1000, -1000, 805, -1000, -1000, -1000, -1000,
	743, 106, 37, -1000, -1000, 805, 805, 805, 805, 805,
	805, 805, 805, 805, 805, 805, 805, 805, 805, 66,
	31, -1000, 628, -1000, -1000, -1000, 35, 33, 73, 30,
	678, 601, -1000, -1000, -1000, 805, 78, 770, 574, -28,
	27, -1000, 678, -1000, -1000, 805, 76, -30, 22, -1000,
	-11, 805, -1000, -1000, 805, 76, -1000, -21, -21, -1000,
	-1000, -1000, -23, -23, -23, -23, -23, -23, 53, 80,
	678, 805, 805, 74, 322, 73, -19, 29, -1000, 805,
	322, -22, -3, 678, -1000, 232, 805, -1000, -1000, -1000,
	743, 743, 4, 547, 26, -1000, -1000, 106, 106, 805,
	520, 493, 21, 678, 466, -1000, 144, -25, 322, 70,
	678, 130, -1000, -1000, 805, -1000, 706, 439, -1000, -1000,
	-1000, -1000, 743, 805, -1000, -1000, 678, -18, 106, 805,
	322, 136, 144, -1000, 805, 322, 126, -1000, -1000, 678,
	-1000, 411, -1000, 143, 395, 805, 141, 362, 125, 120,
	-1000, 322, -1000, 346, 117, -1000, -1000, 134, 143, -1000,
	805, 743, 678, 133, 141, -1000, 805, 106, -1000, -1000,
	-1000, 322, -1000, 116, -1000, 743, -1000, 292, 113, 112,
	-1000, 106, -1000, 265, 95, -1000, -1000, -1000, 743, -1000,
	-1000, -1000, 106, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 236, 73, 233, 167, 231, 228, 227, 226, 225,
	223, 221, 6, 218, 217, 215, 9, 213, 211, 0,
	133, 208, 200, 63, 38, 28, 198, 8, 197, 196,
	195, 193, 2, 192, 7, 191, 190, 189, 185, 1,
	183, 182, 181, 3, 180, 5, 176, 174, 173, 169,
	4, 168, 165, 158, 156, 154, 10, 152,
}
var yyR1 = [...]int{

	0, 54, 1, 2, 2, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 5, 6,
	7, 7, 8, 9, 10, 10, 11, 11, 12, 13,
	13, 14, 15, 16, 16, 17, 18, 18, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 53,
	53, 53, 23, 24, 25, 26, 26, 26, 22, 27,
	27, 28, 28, 29, 29, 30, 30, 31, 32, 32,
	33, 33, 33, 34, 34, 34, 34, 35, 36, 37,
	37, 38, 38, 39, 40, 40, 41, 42, 43, 43,
	44, 44, 44, 45, 45, 45, 46, 47, 48, 48,
	49, 49, 50, 51, 51, 52, 56, 56, 57, 57,
	57, 57, 55, 55,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 0, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 2,
	3, 1, 7, 7, 1, 0, 2, 1, 4, 1,
	0, 2, 7, 3, 1, 3, 2, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 5, 5, 6, 6, 1,
	0, 3, 1, 2, 0, 3, 1, 3, 2, 0,
	3, 3, 1, 3, 5, 1, 1, 7, 7, 1,
	0, 2, 1, 4, 1, 0, 2, 3, 2, 0,
	3, 3, 1, 1, 1, 1, 7, 7, 1, 0,
	2, 1, 4, 1, 0, 2, 1, 0, 2, 2,
	1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -54, -1, -2, -3, -4, 38, -17, -18, -15,
	-9, -8, -6, -5, -19, -53, 20, 12, 13, 11,
	17, 21, -20, -23, -24, -25, 15, 34, 35, -21,
	24, 23, 22, 19, 10, 39, -26, -22, -42, -31,
	41, 44, -4, 38, 38, 34, 35, 36, 37, 48,
	28, 29, 30, 31, 26, 27, 5, 16, 25, 24,
	-16, 24, -19, -23, -24, -25, 11, 24, 39, -7,
	-19, -19, -20, -20, -20, 39, 43, 41, -19, -43,
	-44, -45, -19, -46, -47, 13, 12, -32, -33, -34,
	24, 41, -35, -36, 13, 12, 38, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, 25, 14, 40, 18, 39, -27, -28, 24, 40,
	6, -29, -30, -19, 24, -19, 42, 45, 46, -56,
	40, 38, -57, -19, -16, 47, -56, 40, 38, 42,
	-19, -19, -16, -19, -19, 24, -2, -27, 45, 40,
	-19, -2, 45, -55, 40, 46, 42, -19, -45, -45,
	38, 40, 18, 14, -34, -34, -19, 46, 18, 14,
	6, -10, -11, -12, 7, 45, -2, 24, 9, -19,
	46, -19, 46, -43, -19, 42, -32, -19, -2, -13,
	-14, 8, -12, -19, -2, 9, 46, -48, -49, -50,
	7, 6, -19, -37, -38, -39, 7, 6, 9, 9,
	-2, 18, 9, -51, -52, 8, -50, -19, -43, -40,
	-41, 8, -39, -19, -32, -2, 9, -43, 18, 9,
	9, -32, 18, 9, -43, -32,
}
var yyDef = [...]int{

	5, -2, 1, 2, 3, 4, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 0, 0, 0, 0, 0,
	0, 0, 38, -2, -2, -2, 0, 0, 0, 55,
	72, 56, 57, 58, 59, 0, 65, 66, 67, 68,
	109, 89, 0, 7, 8, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	0, 34, 0, 62, 63, 64, 0, 0, 80, 19,
	21, 0, 52, 53, 54, 84, 0, 0, 0, 0,
	127, 112, 113, 114, 115, 0, 0, 0, 127, 92,
	0, 0, 95, 96, 0, 0, 6, 39, 40, 41,
	42, 43, -2, -2, -2, -2, -2, -2, 50, 51,
	35, 0, 0, 0, 5, 80, 0, 79, 82, 0,
	5, 0, 133, 86, 73, 0, 0, 61, 107, 108,
	131, 130, 126, 0, 0, 87, 88, 131, 130, 0,
	0, 0, 0, 37, 0, 33, 25, 0, 5, 0,
	20, 0, 60, 83, 132, 74, 0, 0, 110, 111,
	128, 129, 109, 0, 90, 91, 93, 0, 89, 0,
	5, 30, 24, 27, 0, 5, 0, 81, 18, 85,
	75, 0, 76, 119, 0, 0, 100, 0, 0, 0,
	29, 5, 26, 0, 0, 78, 77, 124, 118, 121,
	0, 109, 94, 105, 99, 102, 0, 89, 32, 23,
	31, 5, 22, 0, 123, 109, 120, 0, 0, 0,
	104, 89, 101, 0, 0, 28, 116, 125, 109, 117,
	97, 106, 89, 98, 122, 103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 32, 3, 3, 48, 3, 3,
	39, 45, 36, 34, 40, 35, 43, 37, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 42, 38,
	28, 25, 30, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 41, 3, 46, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 33, 47,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 26, 27, 29, 31,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:111
		{
			yylex.(*lex).Module = yyDollar[1].ast.(*ast.Module)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
			m := &ast.Module{}
			m.Stmts = yyDollar[1].asts
			m.SetPos(yyDollar[1].asts.Pos())
			yyVAL.ast = m
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:122
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:123
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:125
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:127
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:138
		{
			yyVAL.ast = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:146
		{
			yyVAL.ast = &ast.WhileStmt{Predicate: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:152
		{
			yyVAL.ast = &ast.ReturnStmt{Values: yyDollar[2].ast.(ast.Exprs)}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			l := yyDollar[1].ast.(ast.Exprs)
			yyVAL.ast = append(l, yyDollar[3].expr)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:163
		{
			yyVAL.ast = ast.Exprs{yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:171
		{
			fn := &ast.FuncStmt{}
			fn.Name = yyDollar[2].tok.Str
			fn.Params = yyDollar[4].asts
			fn.Stmts = yyDollar[6].asts
			fn.SetPos(yyDollar[1].tok.Pos)
			yyVAL.ast = fn
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:185
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:200
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:205
		{
			l := yyDollar[1].asts
			yyVAL.asts = append(l, yyDollar[2].ast)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:210
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:216
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:223
		{
			yyVAL.ast = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:229
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:237
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:243
		{
			yyVAL.asts = append(yyDollar[1].asts, &ast.ForVar{VarName: yyDollar[3].tok})
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:247
		{
			yyVAL.asts = ast.ASTs{&ast.ForVar{VarName: yyDollar[1].tok}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:253
		{
			lvalue := &ast.LValue{Expr: yyDollar[1].expr}
			lvalue.SetPos(yyDollar[1].expr.Pos())
			yyVAL.ast = &ast.AssignStmt{Lvalue: lvalue, Rvalue: yyDollar[3].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:261
		{
			yyVAL.ast = &ast.VarDeclStmt{VarName: yyDollar[2].tok, InitValue: nil}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:266
		{
			yyVAL.ast = &ast.VarDeclStmt{VarName: yyDollar[2].tok, InitValue: yyDollar[4].expr}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:273
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:278
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:283
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMult}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:288
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpDiv}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:293
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpMod}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:298
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:303
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpLE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:308
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGT}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:313
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpGE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:318
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpEq}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:323
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr, Op: ast.BinOpNE}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:328
		{
			yyVAL.expr = &ast.AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:333
		{
			yyVAL.expr = &ast.OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:339
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpNot}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:344
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpPlus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:349
		{
			yyVAL.expr = &ast.UnaryExpr{Term: yyDollar[2].expr, Op: ast.UnaryOpMinus}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:356
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:361
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:366
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:371
		{
			yyVAL.expr = &ast.LiteralExpr{Val: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:376
		{
			yyVAL.expr = &ast.FuncCall{Target: yyDollar[1].expr, Args: yyDollar[3].exprs}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:381
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:397
		{
			yyVAL.expr = &ast.SimpleRef{ID: yyDollar[1].tok}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:403
		{
			yyVAL.expr = &ast.MemberAccess{Target: yyDollar[1].expr, Member: yyDollar[3].tok}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:409
		{
			yyVAL.expr = &ast.IndexExpr{Target: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:415
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:420
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, End: yyDollar[4].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:425
		{
			yyVAL.expr = &ast.SliceExpr{Target: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
			yyVAL.expr.SetPos(yyDollar[1].expr.Pos())
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:433
		{
			l := &ast.LambdaExpr{}
			l.Params = yyDollar[3].asts
			l.Stmts = yyDollar[5].asts
			l.SetPos(yyDollar[1].tok.Pos)
			yyVAL.expr = l
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:443
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:448
		{
			param := &ast.FuncParam{Name: yyDollar[3].tok.Str}
			param.SetPos(yyDollar[3].tok.Pos)
			yyVAL.asts = append(yyDollar[1].asts, param)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
			yyVAL.asts = ast.ASTs{&ast.FuncParam{Name: yyDollar[1].tok.Str}}
			yyVAL.asts.SetPos(yyDollar[1].tok.Pos)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:461
		{
			yyVAL.exprs = ast.Exprs{}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:470
		{
			yyVAL.exprs = ast.Exprs{yyDollar[1].expr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:475
		{
			yyVAL.expr = &ast.ObjectLiteral{Fields: yyDollar[2].asts}
			yyVAL.expr.SetPos(yyDollar[1].tok.Pos)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:482
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:487
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:491
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:495
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.ast = &ast.ObjectField{NameID: yyDollar[1].tok.Str, Val: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:504
		{
			yyVAL.ast = &ast.ObjectField{NameExpr: yyDollar[2].expr, Val: yyDollar[5].expr}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:515
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:531
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:538
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:543
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:547
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:553
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:560
		{
			yyVAL.ast = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:566
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:572
		{
			yyVAL.expr = &ast.ArrayLiteral{Elements: yyDollar[2].asts}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:578
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:583
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:587
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:591
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:596
		{
			yyVAL.ast = &ast.ArrayElement{Val: yyDollar[1].expr}
			yyVAL.ast.SetPos(yyDollar[1].expr.Pos())
		}
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:608
		{
			ifBlock := &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			ifStmt := &ast.IfStmt{Blocks: ast.ASTs{ifBlock}}
			if yyDollar[5].asts != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[5].asts...)
			}
			if yyDollar[6].ast != nil {
				ifStmt.Blocks = append(ifStmt.Blocks, yyDollar[6].ast)
			}
			yyVAL.ast = ifStmt
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:624
		{
			yyVAL.ast = &ast.ForStmt{ForVars: yyDollar[2].asts, IterExpr: yyDollar[4].expr, Stmts: yyDollar[6].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:631
		{
			yyVAL.asts = ast.ASTs{}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:636
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:640
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:646
		{
			yyVAL.ast = &ast.IfBlock{Pred: yyDollar[2].expr, Stmts: yyDollar[4].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:653
		{
			yyVAL.ast = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.ast = &ast.IfBlock{Pred: nil, Stmts: yyDollar[2].asts}
			yyVAL.ast.SetPos(yyDollar[1].tok.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
