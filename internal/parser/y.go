// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import ()

//line parser.y:8
type yySymType struct {
	yys  int
	num  float64
	str  string
	ast  interface{}
	expr interface{}
}

const LEXERR = 57346
const kAND = 57347
const kDO = 57348
const kELIF = 57349
const kELSE = 57350
const kEND = 57351
const kFALSE = 57352
const kFN = 57353
const kFOR = 57354
const kIF = 57355
const kIN = 57356
const kNOT = 57357
const kOR = 57358
const kRETURN = 57359
const kTHEN = 57360
const kTRUE = 57361
const kVAR = 57362
const kWHILE = 57363
const NUMBER = 57364
const STRING = 57365
const ID = 57366
const LE = 57367
const GE = 57368
const EQ = 57369
const NE = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kAND",
	"kDO",
	"kELIF",
	"kELSE",
	"kEND",
	"kFALSE",
	"kFN",
	"kFOR",
	"kIF",
	"kIN",
	"kNOT",
	"kOR",
	"kRETURN",
	"kTHEN",
	"kTRUE",
	"kVAR",
	"kWHILE",
	"NUMBER",
	"STRING",
	"ID",
	"'<'",
	"LE",
	"'>'",
	"GE",
	"EQ",
	"NE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"';'",
	"','",
	"'('",
	"')'",
	"'='",
	"'['",
	"']'",
	"'.'",
	"'{'",
	"'}'",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 92,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 42,
	-1, 93,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 43,
	-1, 94,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 44,
	-1, 95,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 45,
	-1, 96,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 46,
	-1, 97,
	25, 0,
	26, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 47,
}

const yyPrivate = 57344

const yyLast = 674

var yyAct = [...]int{

	8, 2, 77, 69, 187, 181, 159, 79, 105, 53,
	71, 117, 168, 127, 123, 116, 100, 161, 55, 67,
	60, 61, 65, 141, 66, 136, 57, 146, 147, 40,
	41, 42, 43, 50, 68, 72, 126, 125, 86, 58,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 44, 45, 46, 47, 48, 49, 40,
	41, 42, 43, 85, 84, 143, 110, 155, 114, 104,
	149, 119, 118, 38, 58, 80, 121, 101, 137, 108,
	42, 43, 128, 163, 15, 129, 122, 215, 107, 102,
	124, 81, 102, 133, 54, 130, 111, 52, 212, 102,
	211, 131, 132, 208, 194, 134, 62, 63, 64, 138,
	191, 139, 190, 135, 178, 164, 203, 197, 174, 72,
	72, 188, 182, 160, 120, 196, 180, 4, 152, 144,
	145, 36, 195, 150, 151, 179, 74, 73, 162, 70,
	202, 186, 201, 185, 165, 83, 82, 78, 142, 72,
	167, 113, 166, 106, 32, 112, 170, 169, 171, 31,
	30, 176, 24, 177, 173, 175, 158, 172, 157, 184,
	59, 13, 12, 11, 10, 9, 192, 7, 6, 3,
	1, 0, 0, 199, 72, 0, 198, 200, 0, 205,
	0, 204, 206, 0, 0, 207, 0, 0, 72, 0,
	0, 209, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 72, 0, 0, 216, 0, 0, 217, 29, 18,
	16, 17, 0, 21, 0, 19, 0, 28, 14, 20,
	26, 25, 27, 0, 0, 0, 0, 0, 0, 22,
	23, 0, 0, 5, 0, 33, 0, 0, 34, 0,
	0, 35, 29, 18, 16, 17, 0, 21, 0, 19,
	0, 28, 14, 20, 26, 25, 27, 0, 0, 0,
	0, 0, 0, 22, 23, 0, 0, 37, 0, 33,
	0, 0, 34, 0, 0, 35, 29, 56, 76, 75,
	0, 21, 0, 0, 0, 28, 0, 0, 26, 25,
	27, 0, 0, 0, 0, 0, 0, 22, 23, 29,
	56, 0, 0, 33, 21, 0, 34, 0, 28, 35,
	0, 26, 25, 27, 50, 0, 0, 0, 0, 0,
	22, 23, 0, 0, 0, 51, 33, 0, 0, 34,
	0, 0, 35, 50, 44, 45, 46, 47, 48, 49,
	40, 41, 42, 43, 51, 0, 0, 0, 0, 0,
	153, 0, 50, 44, 45, 46, 47, 48, 49, 40,
	41, 42, 43, 51, 0, 0, 0, 0, 0, 140,
	0, 50, 44, 45, 46, 47, 48, 49, 40, 41,
	42, 43, 51, 0, 0, 0, 39, 0, 0, 0,
	50, 44, 45, 46, 47, 48, 49, 40, 41, 42,
	43, 51, 0, 214, 115, 0, 0, 0, 0, 50,
	44, 45, 46, 47, 48, 49, 40, 41, 42, 43,
	51, 0, 210, 0, 0, 0, 0, 0, 50, 44,
	45, 46, 47, 48, 49, 40, 41, 42, 43, 51,
	0, 193, 0, 0, 0, 0, 0, 0, 44, 45,
	46, 47, 48, 49, 40, 41, 42, 43, 50, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	46, 47, 48, 49, 40, 41, 42, 43, 50, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	46, 47, 48, 49, 40, 41, 42, 43, 50, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 50, 44, 45,
	46, 47, 48, 49, 40, 41, 42, 43, 51, 0,
	154, 0, 0, 0, 0, 0, 50, 44, 45, 46,
	47, 48, 49, 40, 41, 42, 43, 51, 0, 148,
	0, 0, 0, 0, 0, 0, 44, 45, 46, 47,
	48, 49, 40, 41, 42, 43, 50, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 50, 44, 45, 46, 47,
	48, 49, 40, 41, 42, 43, 51, 0, 103, 0,
	0, 0, 0, 0, 50, 44, 45, 46, 47, 48,
	49, 40, 41, 42, 43, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 45, 46, 47, 48, 49,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	40, 41, 42, 43,
}
var yyPact = [...]int{

	208, -1000, -1000, 242, 38, -1000, -1000, -1000, 357, -1000,
	-1000, -1000, -1000, -1000, 73, -1000, 70, 299, 2, 299,
	299, 299, 299, 299, -18, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 299, 276, 51, 3, -1000, -1000, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, -23, 63, -1000, 610, 37, 32, 64, 43,
	629, 591, -1000, -1000, -1000, 299, 72, 299, 376, -26,
	36, -1000, 629, -1000, -1000, 299, 70, -30, 1, -1000,
	-32, 299, -1000, -1000, 299, 70, -1000, 629, 47, 47,
	-1000, -1000, -2, -2, -2, -2, -2, -2, 639, 28,
	299, 299, 69, 208, 64, -13, 42, -1000, 299, 208,
	338, -1000, -15, 29, 629, -1000, -1000, -1000, 276, 276,
	-8, 561, 56, -1000, -1000, 51, 51, 299, 319, 542,
	53, 629, 523, -1000, 116, -21, 208, 59, 629, 106,
	-1000, -1000, -1000, 299, -1000, -1000, -1000, -1000, 276, 299,
	-1000, -1000, 629, -33, 51, 299, 208, 110, 116, -1000,
	299, 208, 105, -1000, -1000, 629, 115, 493, 299, 114,
	463, 103, 101, -1000, 208, -1000, 433, 95, -1000, 109,
	115, -1000, 299, 276, 629, 108, 114, -1000, 299, 51,
	-1000, -1000, -1000, 208, -1000, 94, -1000, 276, -1000, 414,
	91, 89, -1000, 51, -1000, 395, 78, -1000, -1000, -1000,
	276, -1000, -1000, -1000, 51, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 180, 1, 179, 127, 178, 177, 0, 175, 174,
	173, 172, 171, 170, 8, 168, 167, 166, 6, 164,
	9, 84, 162, 160, 159, 155, 154, 153, 151, 148,
	2, 147, 11, 7, 146, 145, 143, 142, 141, 4,
	140, 3, 139, 10, 137, 136, 135, 132, 126, 5,
	125, 124,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 12, 11, 13,
	13, 10, 9, 15, 15, 17, 17, 18, 16, 16,
	19, 8, 20, 20, 5, 6, 6, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 26, 14, 14, 27,
	27, 25, 25, 28, 28, 24, 30, 30, 31, 31,
	31, 33, 33, 33, 33, 34, 35, 36, 36, 38,
	38, 39, 37, 37, 40, 23, 41, 41, 42, 42,
	42, 43, 43, 43, 44, 45, 46, 46, 48, 48,
	49, 47, 47, 50, 32, 32, 51, 51, 51, 51,
	29, 29,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 0, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 5, 2, 3,
	1, 7, 7, 1, 0, 2, 1, 4, 1, 0,
	2, 7, 3, 1, 3, 2, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 3, 6, 1, 0, 3,
	1, 2, 0, 3, 1, 3, 2, 0, 3, 3,
	1, 3, 5, 1, 1, 7, 7, 1, 0, 2,
	1, 4, 1, 0, 2, 3, 2, 0, 3, 3,
	1, 1, 1, 1, 7, 7, 1, 0, 2, 1,
	4, 1, 0, 2, 0, 1, 2, 2, 1, 1,
	1, 0,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, 35, -5, -6, -7, -8,
	-9, -10, -11, -12, 20, -21, 12, 13, 11, 17,
	21, 15, 31, 32, -22, 23, 22, 24, 19, 10,
	-23, -24, -26, 37, 40, 43, -4, 35, 35, 39,
	31, 32, 33, 34, 25, 26, 27, 28, 29, 30,
	5, 16, 24, -20, 24, -7, 11, 24, 37, -13,
	-7, -7, -21, -21, -21, 40, 42, 37, -7, -41,
	-42, -43, -7, -44, -45, 13, 12, -30, -31, -33,
	24, 40, -34, -35, 13, 12, 35, -7, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	39, 14, 36, 18, 37, -14, -27, 24, 36, 6,
	-7, 24, -25, -28, -7, 38, 41, -32, 36, 35,
	-51, -7, -20, 44, -32, 36, 35, 45, -7, -7,
	-20, -7, -7, 24, -2, -14, 38, 36, -7, -2,
	41, 38, -29, 36, -43, -43, 35, 36, 18, 14,
	-33, -33, -7, 41, 18, 14, 6, -15, -17, -18,
	7, 38, -2, 24, 9, -7, -41, -7, 45, -30,
	-7, -2, -16, -19, 8, -18, -7, -2, 9, -46,
	-48, -49, 7, 6, -7, -36, -38, -39, 7, 6,
	9, 9, -2, 18, 9, -47, -50, 8, -49, -7,
	-41, -37, -40, 8, -39, -7, -30, -2, 9, -41,
	18, 9, 9, -30, 18, 9, -41, -30,
}
var yyDef = [...]int{

	4, -2, 1, 2, 3, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 0, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 54, 55, 56, 57, 58,
	59, 60, 64, 0, 97, 77, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 0, 33, 0, 0, 0, 68, 18,
	20, 0, 50, 51, 52, 0, 0, 72, 0, 0,
	114, 100, 101, 102, 103, 0, 0, 0, 114, 80,
	0, 0, 83, 84, 0, 0, 5, 34, 38, 39,
	40, 41, -2, -2, -2, -2, -2, -2, 48, 49,
	0, 0, 0, 4, 68, 0, 67, 70, 0, 4,
	0, 62, 0, 121, 74, 65, 95, 96, 119, 118,
	115, 0, 0, 75, 76, 119, 118, 0, 0, 0,
	0, 36, 0, 32, 24, 0, 4, 0, 19, 0,
	61, 63, 71, 120, 98, 99, 116, 117, 97, 0,
	78, 79, 81, 0, 77, 0, 4, 29, 23, 26,
	0, 4, 0, 69, 17, 73, 107, 0, 0, 88,
	0, 0, 0, 28, 4, 25, 0, 0, 66, 112,
	106, 109, 0, 97, 82, 93, 87, 90, 0, 77,
	31, 22, 30, 4, 21, 0, 111, 97, 108, 0,
	0, 0, 92, 77, 89, 0, 0, 27, 104, 113,
	97, 105, 85, 94, 77, 86, 110, 91,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	37, 38, 33, 31, 36, 32, 42, 34, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 45, 35,
	25, 39, 27, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 40, 3, 41, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 43, 3, 44,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 26, 28, 29, 30,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:49
		{
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:51
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:52
		{
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:53
		{
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:55
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:56
		{
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:57
		{
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:58
		{
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:60
		{
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:61
		{
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:62
		{
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:63
		{
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:64
		{
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:65
		{
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:66
		{
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:67
		{
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:72
		{
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:76
		{
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:77
		{
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:82
		{
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:89
		{
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:91
		{
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:92
		{
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:94
		{
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:95
		{
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:99
		{
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:101
		{
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:102
		{
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:106
		{
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:111
		{
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:113
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:116
		{
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:118
		{
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:119
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:122
		{
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:123
		{
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:124
		{
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:125
		{
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:126
		{
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:127
		{
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:128
		{
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:129
		{
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:130
		{
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:131
		{
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:132
		{
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:133
		{
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:135
		{
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:136
		{
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:137
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:138
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:140
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:141
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:142
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:143
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:144
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:145
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:146
		{
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:147
		{
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:148
		{
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:149
		{
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:150
		{
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:151
		{
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:156
		{
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:158
		{
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:159
		{
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:161
		{
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:162
		{
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:164
		{
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:165
		{
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:167
		{
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:168
		{
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:170
		{
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:172
		{
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:173
		{
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:177
		{
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:180
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:181
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:182
		{
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:189
		{
		}
	case 86:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:194
		{
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:196
		{
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:197
		{
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:199
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:200
		{
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:204
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:206
		{
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:207
		{
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:211
		{
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:213
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:215
		{
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:216
		{
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:218
		{
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:219
		{
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:220
		{
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:222
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:223
		{
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:224
		{
		}
	case 104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:231
		{
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:236
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:238
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:239
		{
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:248
		{
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:249
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:253
		{
		}
	}
	goto yystack /* stack new state and value */
}
