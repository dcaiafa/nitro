// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/stub/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

func cast[T ast.AST](v ast.AST) T {
	cv, _ := v.(T)
	return cv
}

//line parser.y:16
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	other interface{}
}

const LEXERR = 57346
const kCONST = 57347
const kFUNC = 57348
const kPACKAGE = 57349
const kTYPE = 57350
const kSTRUCT = 57351
const kNIL = 57352
const INT = 57353
const FLOAT = 57354
const STRING = 57355
const ID = 57356
const DOC = 57357

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kCONST",
	"kFUNC",
	"kPACKAGE",
	"kTYPE",
	"kSTRUCT",
	"kNIL",
	"INT",
	"FLOAT",
	"STRING",
	"ID",
	"DOC",
	"'='",
	"':'",
	"';'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'.'",
	"'?'",
	"'-'",
	"'{'",
	"'}'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 5,
	-2, 13,
	-1, 6,
	1, 4,
	-2, 13,
}

const yyPrivate = 57344

const yyLast = 77

var yyAct = [...]int8{
	25, 51, 72, 44, 36, 56, 53, 54, 55, 30,
	59, 73, 47, 24, 39, 31, 32, 41, 27, 58,
	33, 52, 15, 66, 62, 29, 49, 60, 38, 13,
	31, 32, 27, 46, 1, 14, 57, 37, 50, 40,
	48, 23, 22, 21, 20, 63, 64, 61, 17, 19,
	7, 18, 4, 2, 26, 9, 34, 16, 35, 67,
	10, 3, 69, 68, 28, 65, 70, 71, 42, 43,
	45, 11, 12, 5, 74, 6, 8,
}

var yyPact = [...]int16{
	45, -1000, -1000, 20, 9, -1000, 20, -1000, -1000, -1000,
	-1000, -1000, 43, 30, -1000, -1000, -1000, 29, 28, 27,
	-14, 18, 2, 1, 23, 12, -11, -1000, -1000, 17,
	-1000, -7, -1000, 19, -16, 23, 8, 18, -5, -1000,
	-1000, 22, -1, -19, -1000, 11, 18, -1000, 6, -1000,
	-1000, -1000, 34, -1000, -1000, -1000, -1000, -1000, 4, 19,
	-5, -1000, -1000, -1000, -1000, -1000, 18, -1000, -1000, -1000,
	-18, -1000, -1000, 18, -1000,
}

var yyPgo = [...]int8{
	0, 76, 1, 50, 75, 73, 72, 71, 70, 3,
	69, 68, 66, 65, 64, 61, 9, 60, 4, 58,
	56, 55, 0, 54, 53, 34,
}

var yyR1 = [...]int8{
	0, 25, 24, 15, 5, 5, 4, 4, 3, 3,
	3, 3, 6, 6, 1, 2, 2, 2, 2, 2,
	2, 17, 20, 20, 19, 19, 18, 21, 14, 14,
	16, 16, 7, 11, 11, 10, 10, 9, 9, 8,
	13, 13, 13, 12, 12, 22, 22, 23,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 0, 6, 2, 1, 2, 1, 1,
	1, 5, 1, 0, 3, 2, 2, 4, 2, 1,
	3, 1, 7, 1, 0, 3, 1, 1, 3, 2,
	3, 1, 0, 3, 1, 1, 2, 1,
}

var yyChk = [...]int16{
	-1000, -25, -24, -15, 7, -5, -4, -3, -1, -21,
	-17, -7, -6, 9, 15, 13, -3, 5, 8, 6,
	14, 14, 14, 14, 27, -22, -23, 14, -14, 23,
	-16, 13, 14, 19, -20, -19, -18, 14, 16, 25,
	-16, 24, -11, -10, -9, -8, 14, 28, -18, 18,
	-22, -2, 26, 11, 12, 13, 10, 14, 20, 29,
	16, -22, 18, 11, 12, -13, 19, -22, -9, -2,
	-12, -22, 20, 29, -22,
}

var yyDef = [...]int8{
	0, -2, 1, -2, 0, 2, -2, 7, 8, 9,
	10, 11, 0, 0, 12, 3, 6, 0, 0, 0,
	0, 0, 0, 0, 23, 0, 45, 47, 27, 0,
	29, 0, 31, 34, 0, 22, 0, 0, 0, 46,
	28, 0, 0, 33, 36, 37, 0, 21, 0, 25,
	26, 14, 0, 16, 18, 19, 20, 30, 42, 0,
	0, 39, 24, 15, 17, 32, 0, 41, 35, 38,
	0, 44, 40, 0, 43,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	19, 20, 23, 3, 29, 26, 24, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 17, 18,
	3, 16, 3, 25, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 21, 3, 22, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 28,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:70
		{
			yylex.(*lex).Unit = yyDollar[1].ast.(*ast.Unit)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:74
		{
			unit := yyVAL.ast.(*ast.Unit)
			unit.Decls = yyDollar[2].asts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:81
		{
			yyVAL.ast = &ast.Unit{Package: yyDollar[2].tok}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:87
		{
			yyVAL.asts = nil
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:90
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:91
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:100
		{
			yyVAL.ast = &ast.Doc{}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:101
		{
			yyVAL.ast = nil
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:105
		{
			yyVAL.ast = &ast.ConstDecl{
				Doc:     cast[*ast.Doc](yyDollar[1].ast),
				ID:      yyDollar[3].tok,
				TypeRef: cast[*ast.TypeRef](yyDollar[4].ast),
				Value:   cast[*ast.ConstValue](yyDollar[6].ast),
			}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:115
		{
			yyVAL.ast = &ast.ConstValue{Value: -yyDollar[2].tok.Int}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:116
		{
			yyVAL.ast = &ast.ConstValue{Value: yyDollar[1].tok.Int}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:117
		{
			yyVAL.ast = &ast.ConstValue{Value: -yyDollar[2].tok.Float}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			yyVAL.ast = &ast.ConstValue{Value: yyDollar[1].tok.Float}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:119
		{
			yyVAL.ast = &ast.ConstValue{Value: yyDollar[1].tok.Str}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:120
		{
			yyVAL.ast = &ast.ConstValue{Value: nil}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:124
		{
			yyVAL.ast = &ast.StructDecl{
				Name:   yyDollar[2].tok.Str,
				Fields: yyDollar[4].asts,
			}
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:134
		{
			yyVAL.asts = nil
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:140
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:144
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:150
		{
			yyVAL.ast = &ast.StructField{
				Name: yyDollar[1].tok.Str,
				Type: cast[*ast.TypeRef](yyDollar[2].ast),
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:159
		{
			yyVAL.ast = &ast.TypeDecl{
				Doc:    cast[*ast.Doc](yyDollar[1].ast),
				ID:     yyDollar[3].tok,
				GoType: cast[*ast.GoType](yyDollar[4].ast),
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:169
		{
			yyVAL.ast = yyDollar[2].ast
			yyVAL.ast.(*ast.GoType).Ref = true
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			yyVAL.ast = &ast.GoType{Package: yyDollar[1].tok, ID: yyDollar[3].tok}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:181
		{
			yyVAL.ast = &ast.GoType{ID: yyDollar[1].tok}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:187
		{
			yyVAL.ast = &ast.FuncDecl{
				Doc:    cast[*ast.Doc](yyDollar[1].ast),
				ID:     yyDollar[3].tok,
				Params: yyDollar[5].asts,
				Rets:   yyDollar[7].asts,
			}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:199
		{
			yyVAL.asts = nil
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:202
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:203
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:208
		{
			yyVAL.ast.(*ast.FuncParam).DefaultValue = yyDollar[3].ast.(*ast.ConstValue)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:214
		{
			yyVAL.ast = &ast.FuncParam{
				ID:   yyDollar[1].tok,
				Type: cast[*ast.TypeRef](yyDollar[2].ast),
			}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:223
		{
			yyVAL.asts = yyDollar[2].asts
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:227
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:230
		{
			yyVAL.asts = nil
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:233
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:234
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:239
		{
			yyVAL.ast.(*ast.TypeRef).Nilable = true
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:245
		{
			yyVAL.ast = &ast.TypeRef{ID: yyDollar[1].tok}
		}
	}
	goto yystack /* stack new state and value */
}
