// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/dcaiafa/nitro/internal/stub/ast"
	"github.com/dcaiafa/nitro/internal/token"
)

func cast[T ast.AST](v ast.AST) T {
	cv, _ := v.(T)
	return cv
}

//line parser.y:16
type yySymType struct {
	yys   int
	tok   token.Token
	ast   ast.AST
	asts  ast.ASTs
	other interface{}
}

const LEXERR = 57346
const kCONST = 57347
const kFUNC = 57348
const kPACKAGE = 57349
const kTYPE = 57350
const kSTRUCT = 57351
const kNIL = 57352
const kIMPORT = 57353
const INT = 57354
const FLOAT = 57355
const STRING = 57356
const ID = 57357
const DOC = 57358
const ELLIPSIS = 57359

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEXERR",
	"kCONST",
	"kFUNC",
	"kPACKAGE",
	"kTYPE",
	"kSTRUCT",
	"kNIL",
	"kIMPORT",
	"INT",
	"FLOAT",
	"STRING",
	"ID",
	"DOC",
	"ELLIPSIS",
	"'='",
	"':'",
	"';'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'.'",
	"'?'",
	"'-'",
	"'{'",
	"'}'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 5,
	-2, 14,
	-1, 6,
	1, 4,
	-2, 14,
}

const yyPrivate = 57344

const yyLast = 78

var yyAct = [...]int8{
	29, 55, 34, 40, 48, 72, 59, 51, 28, 43,
	35, 36, 45, 31, 73, 58, 37, 63, 31, 65,
	53, 33, 31, 60, 62, 15, 42, 14, 35, 36,
	50, 56, 16, 57, 41, 26, 44, 25, 24, 23,
	22, 27, 54, 52, 17, 19, 21, 7, 20, 4,
	1, 61, 2, 30, 18, 10, 38, 39, 11, 66,
	3, 9, 68, 69, 67, 32, 71, 64, 70, 46,
	47, 49, 12, 13, 74, 5, 6, 8,
}

var yyPact = [...]int16{
	42, -1000, -1000, 16, 30, -1000, 16, -1000, -1000, -1000,
	-1000, -1000, -1000, 40, 25, 24, -1000, -1000, -1000, 23,
	22, 20, 27, -21, 3, -4, -5, -1000, 19, 8,
	-18, -1000, -1000, 14, -1000, -14, -1000, 15, -23, 19,
	0, 3, 17, -1000, -1000, 18, -7, -25, -1000, 5,
	7, -1000, -3, -1000, -1000, -1000, -1000, -1000, -2, 15,
	17, -1000, 3, -1000, -1000, 3, -1000, -1000, -1000, -1000,
	-17, -1000, -1000, 3, -1000,
}

var yyPgo = [...]int8{
	0, 77, 1, 47, 76, 75, 73, 72, 71, 4,
	70, 69, 68, 67, 65, 61, 60, 2, 58, 3,
	57, 56, 55, 0, 53, 52, 50,
}

var yyR1 = [...]int8{
	0, 26, 25, 16, 5, 5, 4, 4, 3, 3,
	3, 3, 3, 6, 6, 1, 2, 15, 18, 21,
	21, 20, 20, 19, 22, 14, 14, 17, 17, 7,
	11, 11, 10, 10, 9, 9, 8, 8, 13, 13,
	13, 12, 12, 23, 23, 24,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 6, 1, 3, 5, 1,
	0, 3, 2, 2, 4, 2, 1, 3, 1, 7,
	1, 0, 3, 1, 1, 3, 2, 3, 3, 1,
	0, 3, 1, 1, 2, 1,
}

var yyChk = [...]int16{
	-1000, -26, -25, -16, 7, -5, -4, -3, -1, -15,
	-22, -18, -7, -6, 11, 9, 16, 14, -3, 5,
	8, 6, 15, 15, 15, 15, 15, 14, 29, -23,
	-24, 15, -14, 25, -17, 14, 15, 21, -21, -20,
	-19, 15, 18, 27, -17, 26, -11, -10, -9, -8,
	15, 30, -19, 20, -23, -2, 14, 15, 22, 31,
	18, -23, 17, 20, -13, 21, -23, -9, -2, -23,
	-12, -23, 22, 31, -23,
}

var yyDef = [...]int8{
	0, -2, 1, -2, 0, 2, -2, 7, 8, 9,
	10, 11, 12, 0, 0, 0, 13, 3, 6, 0,
	0, 0, 0, 0, 0, 0, 0, 17, 20, 0,
	43, 45, 24, 0, 26, 0, 28, 31, 0, 19,
	0, 0, 0, 44, 25, 0, 0, 30, 33, 34,
	0, 18, 0, 22, 23, 15, 16, 27, 40, 0,
	0, 36, 0, 21, 29, 0, 39, 32, 35, 37,
	0, 42, 38, 0, 41,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	21, 22, 25, 3, 31, 28, 26, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 19, 20,
	3, 18, 3, 27, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 23, 3, 24, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 29, 3, 30,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:73
		{
			yylex.(*lex).Unit = yyDollar[1].ast.(*ast.Unit)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:77
		{
			unit := yyVAL.ast.(*ast.Unit)
			unit.Decls = yyDollar[2].asts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:84
		{
			yyVAL.ast = &ast.Unit{Package: yyDollar[2].tok}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:90
		{
			yyVAL.asts = nil
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:93
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:94
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.ast = &ast.Doc{}
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:105
		{
			yyVAL.ast = nil
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:110
		{
			yyVAL.ast = &ast.ConstDecl{
				Doc:     cast[*ast.Doc](yyDollar[1].ast),
				ID:      yyDollar[3].tok,
				TypeRef: cast[*ast.TypeRef](yyDollar[4].ast),
				Value:   cast[*ast.ConstValue](yyDollar[6].ast),
			}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
			yyVAL.ast = &ast.ConstValue{Expr: yyDollar[1].tok.Str}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:127
		{
			yyVAL.ast = &ast.ImportDecl{
				Alias:  yyDollar[2].tok.Str,
				Import: yyDollar[3].tok.Str,
			}
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:136
		{
			yyVAL.ast = &ast.StructDecl{
				Name:   yyDollar[2].tok.Str,
				Fields: yyDollar[4].asts,
			}
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:146
		{
			yyVAL.asts = nil
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:152
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[2].ast)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:156
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:162
		{
			yyVAL.ast = &ast.StructField{
				Name: yyDollar[1].tok.Str,
				Type: cast[*ast.TypeRef](yyDollar[2].ast),
			}
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:171
		{
			yyVAL.ast = &ast.TypeDecl{
				Doc:    cast[*ast.Doc](yyDollar[1].ast),
				ID:     yyDollar[3].tok,
				GoType: cast[*ast.GoType](yyDollar[4].ast),
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:181
		{
			yyVAL.ast = yyDollar[2].ast
			yyVAL.ast.(*ast.GoType).Ref = true
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:189
		{
			yyVAL.ast = &ast.GoType{Package: yyDollar[1].tok, ID: yyDollar[3].tok}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:193
		{
			yyVAL.ast = &ast.GoType{ID: yyDollar[1].tok}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:199
		{
			yyVAL.ast = &ast.FuncDecl{
				Doc:    cast[*ast.Doc](yyDollar[1].ast),
				ID:     yyDollar[3].tok,
				Params: yyDollar[5].asts,
				Rets:   yyDollar[7].asts,
			}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:211
		{
			yyVAL.asts = nil
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:214
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:215
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:220
		{
			yyVAL.ast.(*ast.FuncParam).DefaultValue = yyDollar[3].ast.(*ast.ConstValue)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:226
		{
			yyVAL.ast = &ast.FuncParam{
				ID:   yyDollar[1].tok,
				Type: cast[*ast.TypeRef](yyDollar[2].ast),
			}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:233
		{
			yyVAL.ast = &ast.FuncParam{
				ID:     yyDollar[1].tok,
				Type:   cast[*ast.TypeRef](yyDollar[3].ast),
				VarArg: true,
			}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:243
		{
			yyVAL.asts = yyDollar[2].asts
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:247
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:250
		{
			yyVAL.asts = nil
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:253
		{
			yyVAL.asts = append(yyDollar[1].asts, yyDollar[3].ast)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:254
		{
			yyVAL.asts = ast.ASTs{yyDollar[1].ast}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:259
		{
			yyVAL.ast.(*ast.TypeRef).Nilable = true
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:265
		{
			yyVAL.ast = &ast.TypeRef{ID: yyDollar[1].tok}
		}
	}
	goto yystack /* stack new state and value */
}
